
# 2024-01-29 11:22:00.487355
+\dt+

# 2024-01-29 11:22:09.601538
+select * from idempotency limit 10;

# 2024-01-29 11:22:32.744821
+select * from control_rules limit 10;

# 2024-01-29 11:23:46.761220
+select * from control_rules limit 20;

# 2024-02-02 13:28:10.677711
+\dt+

# 2024-02-02 13:28:43.394519
+select * from organizations;

# 2024-02-02 13:29:03.716639
+exit

# 2024-02-05 16:32:22.868713
+\d pg_stat_activity

# 2024-02-05 16:33:32.613469
+select * from pg_stat_activity;

# 2024-02-05 16:34:24.810934
+select username from pg_stat_activity;

# 2024-02-05 16:34:35.011699
+select * from pg_stat_activity;

# 2024-02-05 16:34:47.343789
+select application_name from pg_stat_activity;

# 2024-02-05 16:35:11.130172
+select application_name from pg_stat_activity where not is_null(application_name);

# 2024-02-05 16:37:01.099190
+SELECT pid, query_start, state_change, state,
+query from pg_stat_activity;

# 2024-02-05 16:37:52.339028
+select pg_sleep(1000000);

# 2024-02-05 16:39:00.050769
+clear

# 2024-02-05 16:39:04.687554
+select application_name from pg_stat_activity where not is_null(application_name);

# 2024-02-05 16:39:17.915140
+SELECT pid, query_start, state_change, state from pg_stat_activity;

# 2024-02-05 16:39:53.423479
+select pg_terminate_backend(pid) from pg_stat_activity where pid <> pg_backend_pid() and backend_type = 'client backend';

# 2024-02-05 16:41:10.057946
+\d pg_stat_database

# 2024-02-05 16:41:54.262545
+select * from pg_stat_database;

# 2024-02-05 16:44:48.123911
+select work_mem from pg_stat_database;

# 2024-02-05 16:44:58.218591
+select * from work_mem;

# 2024-02-05 16:46:34.197064
+select * from pg_stat_database;

# 2024-02-05 16:48:16.812594
+pg_test_timing

# 2024-02-05 16:53:57.045747
+select * from pg_stat_io;

# 2024-02-05 16:54:10.487441
+clear

# 2024-02-05 16:54:19.213538
+select * from pg_statistic;

# 2024-02-05 16:54:46.619435
+select * from pg_stat_all_indexes;

# 2024-02-05 16:55:05.869784
+select * from pg_stat_progress_vacuum;

# 2024-02-05 16:56:34.850996
+select * from pg_stat_user_tables;

# 2024-02-05 16:57:01.180692
+analyze

# 2024-02-05 16:57:21.576740
+create table users (id serial, name text);

# 2024-02-05 16:57:23.552183
+select * from pg_stat_user_tables;

# 2024-02-05 16:57:36.010211
+analyze users;

# 2024-02-05 16:57:37.397382
+select * from pg_stat_user_tables;

# 2024-02-05 16:57:43.624647
+vacuum users;

# 2024-02-05 16:57:44.763844
+select * from pg_stat_user_tables;

# 2024-02-05 16:59:52.716546
+select * from users;

# 2024-02-05 16:59:53.578281
+select * from pg_stat_user_tables;

# 2024-02-05 17:05:19.395685
+hot update

# 2024-02-05 17:05:24.764648
+HOT UPDATE

# 2024-02-05 17:07:38.003638
+SELECT schemaname, relname, seq_scan, seq_tup_read,
+       seq_tup_read / seq_scan AS avg, idx_scan
+FROM pg_stat_user_tables
+WHERE seq_scan > 0
+ORDER BY seq_tup_read DESC LIMIT 25;

# 2024-02-05 17:18:27.474264
+\d pg_stat_user_indexes

# 2024-02-05 17:18:49.588423
+\d pg_stat_user_functions

# 2024-02-05 17:19:15.330496
+SELECT schemaname, relname, indexrelname, idx_scan,
+       pg_size_pretty(pg_relation_size(indexrelid))
+AS idx_size,
+       pg_size_pretty(sum(pg_relation_size(indexrelid))
+               OVER (ORDER BY idx_scan, indexrelid))
+AS total
+FROM   pg_stat_user_indexes
+ORDER BY 6;

# 2024-02-05 17:20:53.677545
+insert into users(id, name) values (1, "adsf")

# 2024-02-05 17:20:54.855044
+insert into users(id, name) values (1, "adsf");

# 2024-02-05 17:20:57.770997
+insert into users(id, name) values (1, 'adsf');

# 2024-02-05 17:21:04.896945
+SELECT schemaname, relname, indexrelname, idx_scan,
+       pg_size_pretty(pg_relation_size(indexrelid))
+AS idx_size,
+       pg_size_pretty(sum(pg_relation_size(indexrelid))
+               OVER (ORDER BY idx_scan, indexrelid))
+AS total
+FROM   pg_stat_user_indexes
+ORDER BY 6;
+

# 2024-02-05 17:24:46.611982
+\d pg_stat_bgwriter

# 2024-02-05 17:30:39.851643
+\d pg_stat_archiver

# 2024-02-05 17:30:49.149308
+select * from pg_stat_archiver;

# 2024-02-05 17:30:55.636767
+\d pg_stat_archiver

# 2024-02-05 18:57:38.199534
+exit

# 2024-02-06 16:27:56.536663
+select * from users;

# 2024-02-06 16:48:09.803690
+exit

# 2024-02-07 23:37:48.787308
+select I fr

# 2024-02-07 23:37:57.713233
+select * from pg_stat_archiver;

# 2024-02-07 23:38:06.052759
+select * from pg_stat_replication;

# 2024-02-07 23:38:13.376029
+select * from pg_stat_activity;

# 2024-02-07 23:38:35.623915
+select * from pg_stat_database;

# 2024-02-07 23:39:42.605374
+select * from pg_stat_ssl;

# 2024-02-07 23:42:07.193347
+select * from pg_stat_progress_vacuum;

# 2024-02-07 23:42:28.208578
+select * from pg_stat_progress_create_index;

# 2024-02-07 23:43:22.561615
+clear

# 2024-02-07 23:43:33.805694
+select * from pg_stats;

# 2024-02-07 23:50:04.789932
+SHOW track_activity_query_size;

# 2024-02-13 09:32:20.034957
+\d

# 2024-02-13 09:32:33.074101
+select * from logbook_rights limit 1;

# 2024-02-13 09:32:39.761951
+select * from logbook_permissions limit 1;

# 2024-02-13 09:33:15.612733
+drop table if exists logbook_permissions;

# 2024-02-13 09:33:34.700535
+select * from logbook_permissions;

# 2024-02-13 09:34:02.370649
+alter table logbook_permissions add description text

# 2024-02-13 09:34:06.590440
+select * from logbook_permissions;

# 2024-02-13 09:35:04.339060
+insert into logbook_permissions(description) values ('При сканирование QR-кода возможен просмотр журнала') where permission_type = 'read'

# 2024-02-13 09:35:09.459829
+insert into logbook_permissions(description) values ('При сканирование QR-кода возможен просмотр журнала')

# 2024-02-13 09:35:43.451129
+insert into logbook_permissions(description) values ('При сканирование QR-кода возможен просмотр журнала', 'При сканирование QR-кода возможно заполнение журнала', 'Добавить журнал в список журналов мобильного приложения')

# 2024-02-13 09:36:06.246795
+drop table if exists logbook_permissions;

# 2024-02-13 09:36:11.393377
+drop table if exists logbook_permissions cascade;

# 2024-02-13 09:36:23.165347
+BEGIN;
+
+create table if not exists logbook_permissions 
+(
+    permission_type             text                                   not null, 
+    title                       text                                   not null,
+    description                 text                                   not null,
+    default_value               boolean                                not null,
+    created_at                  timestamp with time zone default now() not null,
+
+    constraint permissions_pk primary key (permission_type)
+);
+
+create table if not exists logbook_rights
+(
+    org_id                 uuid                                   not null,
+    logbook_id             uuid                                   not null,
+    employee_position_id   uuid                                   not null,
+    permission_type        text                                   not null,
+    value                  bool                                   not null,
+    created_at             timestamp with time zone default now() not null,
+    updated_at             timestamp with time zone default now() not null,
+
+    constraint logbook_rights_pk primary key (org_id, logbook_id, employee_position_id, permission_type),
+    constraint logbook_rights_fk foreign key (permission_type) references logbook_permissions (permission_type)
+);
+
+insert into logbook_permissions (permission_type, title, description, default_value) values
+    ('read', 'Чтение', 'При сканирование QR-кода возможен просмотр журнала', false),
+    ('write', 'Запись', 'При сканирование QR-кода возможно заполнение журнала', true),
+    ('mobile_list', 'Добавить журнал в список журналов мобильного приложения', 'Журнал будет доступен на экране “Список журналов” мобильного приложения', false);
+
+COMMIT;
+

# 2024-02-13 09:36:29.295114
+select * from logbook_permissions;

# 2024-02-13 09:36:41.323387
+select * from logbook_rights

# 2024-02-13 09:39:27.456837
+select * from logbook_permissions;

# 2024-02-13 09:39:55.547000
+select * from logbook_rights;

# 2024-02-13 09:40:21.657785
+select unique permission_type from logbook_rights

# 2024-02-13 09:40:30.885840
+select distinct permission_type from logbook_rights

# 2024-02-13 09:40:53.630348
+select * from logbook_permissions where permission_type in (select distinct permission_type from logbook_rights)

# 2024-02-13 14:43:45.031837
+select * from users limit 1;

# 2024-02-13 14:46:29.394827
+select * from employee_position_users

# 2024-02-28 10:27:54.204908
+ls

# 2024-02-28 10:27:56.297811
+\dt+

# 2024-02-28 10:28:06.062480
+select * from control_rules limit 10;

# 2024-02-28 10:28:36.462819
+select * from control_rules where operator_type = 'eq';

# 2024-02-28 10:31:51.118577
+select * from control_rules where id = '93e57750-6c91-45eb-b0ed-40201321095b';

# 2024-02-28 10:32:11.461503
+select * from control_rule_events where control_rule_id = '93e57750-6c91-45eb-b0ed-40201321095b';

# 2024-02-28 10:32:55.872616
+select * from control_rule limit 10;

# 2024-02-28 10:32:59.801585
+select * from control_rules limit 10;

# 2024-02-28 10:33:11.699871
+select * from control_rules where operator_type = 'eq';

# 2024-04-03 13:53:28.591360
+select "1" < "2"

# 2024-04-03 13:53:38.586417
+select ("1" < "2") as asdf;

# 2024-04-03 13:53:47.878658
+select ('1' < '2')

# 2024-04-03 13:54:26.666331
+select '1' < '3'

# 2024-04-03 13:54:30.020865
+select '2' < '3'

# 2024-04-03 13:54:33.152695
+select '3' < '3'

# 2024-04-04 16:03:41.777518
+exit

# 2024-04-07 01:51:28.874987
+CREATE TABLE (id UUID, title TEXT, description TEXT, created_at timestamp with time zone, updated_at timestamp with time zone);

# 2024-04-07 01:51:41.113862
+create table (

# 2024-04-07 01:51:52.027187
+CREATE TABLE todo (id UUID, title TEXT, description TEXT, created_at timestamp with time zone, updated_at timestamp with time zone);

# 2024-04-07 01:52:13.083580
+select * from todo

# 2024-04-07 12:18:17.655475
+exit

# 2024-04-16 14:20:30.320147
+\dt+

# 2024-04-16 14:21:02.496113
+select * from organizations;

# 2024-04-16 14:21:13.115981
+select * from organizations where name = 'TestAccount'

# 2024-04-16 14:21:56.156042
+select * from employee_positions where org_id = (select id from organizations where name = 'TestAccount')

# 2024-04-16 14:34:50.022631
+select * from tasks

# 2024-04-19 15:32:06.284651
+\dt+

# 2024-04-19 15:32:14.724409
+select * from tasks

# 2024-04-19 15:32:46.248664
+select * from tasks where title = 'заполни в 3ю пятницу каждый месяц в 15:30';

# 2024-04-19 15:33:26.939592
+select * from tasks where title LIKE 'заполни в 3ю пятницу каждый месяц в 15:30';

# 2024-04-19 15:33:31.199954
+select * from tasks where title LIKE 'заполни%';

# 2024-04-19 15:33:40.180767
+select * from tasks where title LIKE 'заполни в%';

# 2024-04-19 15:33:57.452610
+select * from tasks where title LIKE 'заполни в 3%';

# 2024-04-19 15:36:30.037789
+select * from tasks where title LIKE 'бла бла%';

# 2024-04-19 15:38:49.649844
+select * from tasks where title LIKE 'qweqweqwe%';

# 2024-04-19 15:40:28.829579
+select COUNT(1) from tasks where title LIKE 'qweqweqwe%';

# 2024-04-19 15:45:56.634136
+select COUNT(1) from tasks where title LIKE 'заполни каж%';

# 2024-04-19 15:46:04.015100
+select COUNT(1) from tasks where title LIKE 'заполни%';

# 2024-04-19 15:46:15.406398
+select COUNT(1) from tasks where title LIKE 'заполни в 3ю%';

# 2024-04-19 15:52:45.462048
+select COUNT(1) from tasks where title LIKE 'заполни 3я%';

# 2024-04-19 15:52:54.035657
+select COUNT(1) from tasks where title LIKE 'заполни 3я пятница%';

# 2024-04-19 15:53:45.377723
+select ; from tasks where title LIKE 'заполни 3я пятница%';

# 2024-04-19 15:53:51.250920
+select * from tasks where title LIKE 'заполни 3я пятница%';

# 2024-04-19 15:54:32.806934
+delete from tasks where org_id = 'c1301f73-fc3a-4573-ba31-0449ad1d0171';

# 2024-04-19 15:56:04.360951
+select * from tasks where title LIKE 'заполни 3я пятница%';

# 2024-04-19 15:57:58.706056
+select * from tasks where title LIKE 'тест каждая 3 пятница%';

# 2024-04-19 16:00:35.022556
+select * from tasks where title LIKE 'тест каждая 3%';

# 2024-04-19 18:59:34.891702
+select * from tasks where status = 'overdue' and notification_sent false;

# 2024-04-19 19:00:21.814984
+select * from tasks where status = 'overdue' and notification_sent is false;

# 2024-04-22 16:55:29.783609
+select * from tasks

# 2024-04-22 16:55:50.743202
+select * from tasks where schedule_id = '8e8ce2aa-ce34-4a9b-a00a-8c4099b4c030'

# 2024-04-22 16:59:31.706979
+select * from logbook_schedules where schedule_id = '8e8ce2aa-ce34-4a9b-a00a-8c4099b4c030'

# 2024-04-22 16:59:37.106471
+select * from logbook_schedules where id = '8e8ce2aa-ce34-4a9b-a00a-8c4099b4c030'

# 2024-04-22 17:00:33.599628
+select * from logbook_schedules where schedule_id = '8e8ce2aa-ce34-4a9b-a00a-8c4099b4c030'

# 2024-04-22 17:00:44.506837
+select * from logbook_schedules where id = '8e8ce2aa-ce34-4a9b-a00a-8c4099b4c030'

# 2024-04-22 17:01:05.523794
+select * from tasks where schedule_id = '8e8ce2aa-ce34-4a9b-a00a-8c4099b4c030'

# 2024-04-23 13:55:15.604338
+select id from logbook_schedules where enabled = false

# 2024-04-23 13:57:19.241824
+delete from tasks where schedule_id in (select id from logbook_schedules where enabled = false)

# 2024-04-23 13:57:48.763088
+select id from tasks where scheudle_id in (select id from logbook_schedules where deleted_at is not null)

# 2024-04-23 13:57:58.842210
+select id from tasks where schedule_id in (select id from logbook_schedules where deleted_at is not null)

# 2024-04-23 13:58:14.637951
+delete from tasks where scheudle_id in (select id from logbook_schedules where deleted_at is not null)

# 2024-04-23 13:58:23.797119
+delete from tasks where schedule_id in (select id from logbook_schedules where deleted_at is not null)

# 2024-04-23 17:41:30.089548
+exit

# 2024-04-23 18:45:32.017149
+select * from tasks where id = 'c98f9ccf-f319-45fb-a4d6-d18a4534160f'

# 2024-04-25 16:42:04.895429
+select * from control_rules where id = '1d156460755545cf97152ea3562aa6d8';

# 2024-04-25 16:42:38.670553
+select * from control_rules where id = '1097f70e-c5cf-439d-a956-9883a4adb234';

# 2024-04-25 16:44:11.362398
+select * from control_rules where id = '72b06c0d-adc8-4697-a61f-b61b315f111a';

# 2024-04-27 14:55:21.491032
+select * from control_rules where id = '17b1d401-ff49-40f8-8c2b-5e453b63b93a';

# 2024-04-27 15:14:50.424852
+update control_rules set operator = )

# 2024-04-27 15:15:12.657019
+update control_rules set operator = '{"From": 2, "To": 5}'::jsonb where id = '17b1d401-ff49-40f8-8c2b-5e453b63b93a'

# 2024-04-27 15:15:22.855433
+select * from control_rules where id = '17b1d401-ff49-40f8-8c2b-5e453b63b93a';

# 2024-04-27 15:18:24.361234
+select count(1) from control_rules

# 2024-04-27 15:19:07.183592
+select * from control_rules where id = '17b1d401-ff49-40f8-8c2b-5e453b63b93a';

# 2024-04-27 15:19:43.813801
+select * from control_rules where id = '7da10e1d-4a75-47a0-a69f-1732b7f358b5';

# 2024-04-27 15:27:42.536235
+update control_rules set operator = '{"From": 2, "To": 5}'::jsonb where id = '17b1d401-ff49-40f8-8c2b-5e453b63b93a'

# 2024-04-27 15:28:11.585578
+select * from control_rules where id = '7da10e1d-4a75-47a0-a69f-1732b7f358b5';

# 2024-04-27 15:28:27.768249
+select * from control_rules where id = '17b1d401-ff49-40f8-8c2b-5e453b63b93a';

# 2024-04-27 15:28:33.354692
+clear

# 2024-04-27 16:17:13.940197
+explain select count(*) from tasks;

# 2024-04-27 16:17:31.848886
+exit

# 2024-04-27 16:18:18.660676
+select count(1) from tasks

# 2024-04-27 16:18:33.445458
+explain select count(*) from tasks

# 2024-04-27 16:19:01.003566
+explain select org_id from tasks limit 5;

# 2024-04-27 16:19:05.978276
+select org_id from tasks limit 5;

# 2024-04-27 16:28:01.957812
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:28:49.639907
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4' and operator_type = 'out_of'

# 2024-04-27 16:29:29.730591
+update control_rules set operator = '{"From": 2, "To": 5}'::jsonb where id in ('2a76961c-91fc-4d55-938c-28b80aeb153b', '17b1d401-ff49-40f8-8c2b-5e453b63b93a')

# 2024-04-27 16:29:33.559131
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4' and operator_type = 'out_of'

# 2024-04-27 16:29:40.422025
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:29:55.116181
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4' and operator_type = 'gt'

# 2024-04-27 16:30:53.211534
+update control_rules set operator = '{"Value": 1.1}'::jsonb where id in ('2edf902f-0dad-4d28-be25-74f848696120', '3202f5fb-e683-4e5f-93a2-2abb1e70724e')

# 2024-04-27 16:30:56.521461
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4' and operator_type = 'gt'

# 2024-04-27 16:31:04.262043
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:31:15.374668
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4' and operator_type = 'lt'

# 2024-04-27 16:31:47.954669
+update control_rules set operator = '{"Value": 1.5}'::jsonb where id in ('c735b873-4c26-435e-9abd-3c34b630c827')

# 2024-04-27 16:31:51.689552
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4' and operator_type = 'lt'

# 2024-04-27 16:31:54.682963
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:36:12.247974
+select operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:36:25.883119
+select description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:39:00.870436
+select id, description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:39:33.432444
+update control_rules set operator = '{"Value": 50}'::jsonb where id in ('3202f5fb-e683-4e5f-93a2-2abb1e70724e ')

# 2024-04-27 16:39:42.386687
+update control_rules set operator = '{"Value": 50}'::jsonb where id in ('3202f5fb-e683-4e5f-93a2-2abb1e70724e')

# 2024-04-27 16:40:07.111459
+update control_rules set operator = '{"Value": 3}'::jsonb where id in ('2edf902f-0dad-4d28-be25-74f848696120')

# 2024-04-27 16:40:29.434143
+update control_rules set operator = '{"Value": 5}'::jsonb where id in ('c735b873-4c26-435e-9abd-3c34b630c827')

# 2024-04-27 16:41:07.417312
+update control_rules set operator = '{"From": 2, "To": 5}'::jsonb where id in ('2a76961c-91fc-4d55-938c-28b80aeb153b')

# 2024-04-27 16:41:29.840546
+update control_rules set operator = '{"From": 1.22, "To": 1.22}'::jsonb where id in ('17b1d401-ff49-40f8-8c2b-5e453b63b93a')

# 2024-04-27 16:41:33.196522
+select id, description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 16:44:21.612518
+select * from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 17:05:31.749289
+select field_id from control_rules

# 2024-04-27 17:06:55.752397
+select field_id, operator from control_rules

# 2024-04-27 17:20:09.663187
+select id, description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 17:20:40.669051
+update control_rules set operator = '{"From": 2, "To": 5}'::jsonb where id in ('2a76961c-91fc-4d55-938c-28b80aeb153b')

# 2024-04-27 17:21:06.049331
+update control_rules set operator = '{"Value": 5}'::jsonb where id in ('c735b873-4c26-435e-9abd-3c34b630c827')

# 2024-04-27 17:21:39.711134
+update control_rules set operator = '{"Value": 3}'::jsonb where id in ('2edf902f-0dad-4d28-be25-74f848696120')

# 2024-04-27 17:22:10.380844
+update control_rules set operator = '{"Value": 50}'::jsonb where id in ('3202f5fb-e683-4e5f-93a2-2abb1e70724e')

# 2024-04-27 17:22:13.326517
+select id, description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 17:23:06.091555
+select id, field_id, description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-04-27 17:24:49.876002
+update control_rules set operator = '{"From": 2, "To": 5}'::jsonb where id in ('2a76961c-91fc-4d55-938c-28b80aeb153b')

# 2024-04-27 17:24:54.738118
+update control_rules set operator = '{"Value": 5}'::jsonb where id in ('c735b873-4c26-435e-9abd-3c34b630c827')

# 2024-04-27 17:24:58.875648
+update control_rules set operator = '{"Value": 3}'::jsonb where id in ('2edf902f-0dad-4d28-be25-74f848696120')

# 2024-04-27 17:25:05.333467
+update control_rules set operator = '{"Value": 50}'::jsonb where id in ('3202f5fb-e683-4e5f-93a2-2abb1e70724e')

# 2024-04-27 17:25:08.441283
+select id, field_id, description, operator, operator_type, deleted_at from control_rules where logbook_id = 'af294674-51df-4a36-a455-c5e4ae757af4'

# 2024-05-02 13:34:06.351924
+select count(1) from notification_messages;

# 2024-05-02 13:36:04.018553
+exit

# 2024-05-02 14:18:04.236859
+select * from schema_migrations;

# 2024-05-02 14:18:22.125000
+update schema_migrations set version = 44;

# 2024-05-02 14:18:25.642983
+select * from schema_migrations;

# 2024-05-02 14:18:28.336033
+exit

# 2024-05-02 14:46:14.079230
+select * from schema_migrations;

# 2024-05-02 14:46:31.240363
+update schema_migrations set version = 44;

# 2024-05-02 14:54:38.013462
+update schema_migrations set version = 44, dirty = false;

# 2024-05-02 14:55:05.666119
+select * from schema_migrations;

# 2024-05-02 14:55:10.647979
+update schema_migrations set version = 44, dirty = false;

# 2024-05-02 14:55:15.634685
+select * from schema_migrations;

# 2024-05-02 16:17:24.045713
+exit

# 2024-05-03 07:07:46.252033
+select * from logbooks limit 10

# 2024-05-03 07:10:07.982124
+update logbooks set stages = '{}' where stages is null

# 2024-05-03 07:10:12.594312
+select * from logbooks limit 10

# 2024-05-03 07:10:18.398318
+clear

# 2024-05-04 04:54:43.172800
+exit

# 2024-05-05 22:43:27.093039
+WITH RECURSIVE x(n) AS (
+SELECT 1 AS n, 'a'::text AS dummy
+UNION ALL
+SELECT n + 1, dummy || 'a'
+FROM x
+WHERE n < 5
+)
+SELECT
+FROM x;

# 2024-05-05 22:43:39.694953
+select 1

# 2024-05-05 22:43:50.012619
+with recursive x(n) as (

# 2024-05-05 22:44:27.437609
+with recursive x(n) as (select 1 as n, 'a'::text as dummy union all select n + 1, dummy || 'a' from x where n < 5) select from x;

# 2024-05-05 22:44:33.476341
+with recursive x(n) as (select 1 as n, 'a'::text as dummy union all select n + 1, dummy || 'a' from x where n < 5) select * from x;

# 2024-05-05 22:53:04.917973
+CREATE TABLE t_manager
+(
+id serial,
+person text,
+manager text,
+UNIQUE (person, manager)
+);

# 2024-05-05 22:53:23.686481
+INSERT INTO t_manager (person, manager)
+VALUES ('eliza', NULL),
+('ronald', 'eliza'),
+('carlos', 'eliza'),
+('manuel', 'ronald'),
+('mike', 'ronald'),
+('joe', 'carlos'),
+('augustin', 'carlos'),
+('jane', 'carlos')
+;

# 2024-05-05 22:53:29.926299
+select * from t_manager;

# 2024-05-05 22:55:36.271000
+with recursive x as (select person, manager, person as hierarchy from t_manager where manager is null union all select t_manager.person, t_manager.manager, hierarchy || ' --> ' || t_manager.person from t_manager, x where t_manager.manager = x.person) select * from x;

# 2024-05-05 23:13:00.800996
+values (1, 2, 3), (4, 5, 6)

# 2024-05-05 23:13:34.243992
+select row_to_json(x) from (values (1, 2, 3), (4, 5, 6) as x)

# 2024-05-05 23:13:46.079104
+select row_to_json(x) from (values (1, 2, 3), (4, 5, 6)) as x

# 2024-05-05 23:14:47.751697
+select json_agg(x) from (values (1, 2, 3), (4, 5, 6)) as x

# 2024-05-05 23:15:29.397354
+select jsonb_pretty(json_agg(x)::jsonb) from (values (1, 2, 3), (4, 5, 6)) as x

# 2024-05-05 23:16:42.729024
+create table t_json (x int, y int)

# 2024-05-05 23:17:21.503258
+select * from json_populate_record(
+    base             := NULL::t_json,
+    from_json        := '{"x": 52, "y": 65}',
+    use_json_as_text := false
+);

# 2024-05-05 23:18:12.575128
+select * from json_populate_record(
+    base             := NULL::t_json,
+    from_json        := '{"x": 52, "y": 65}, "z": 5',
+    use_json_as_text := false
+);

# 2024-05-05 23:18:24.835545
+select * from json_populate_record(
+    base             := NULL::t_json,
+    from_json        := '{"x": 52, "y": 65, "z": 5}',
+    use_json_as_text := false
+);

# 2024-05-05 23:18:35.606040
+select * from json_populate_record(
+    base             := NULL::t_json,
+    from_json        := '{"x": 52, "y": 65}',
+    use_json_as_text := false
+);

# 2024-05-05 23:18:56.460171
+insert into t_json select * from json_populate_record(
+    base             := NULL::t_json,
+    from_json        := '{"x": 52, "y": 65, "z": 5}',
+    use_json_as_text := false
+);

# 2024-05-05 23:19:04.166070
+select * from t_json;

# 2024-05-05 23:25:41.294205
+clear

# 2024-05-05 23:25:46.705649
+select * from t_json;

# 2024-05-05 23:26:10.779700
+select *
+from t_json;

# 2024-05-06 07:19:44.370276
+exit

# 2024-05-16 07:53:31.433159
+select * from users;

# 2024-05-16 07:54:05.341345
+select * from users where phone = '+711111111112'

# 2024-05-16 07:54:08.356097
+select * from users where phone = '+71111111112'

# 2024-05-16 07:54:25.322157
+select org_id from users where phone = '+71111111112'

# 2024-05-16 07:54:58.550999
+select * from organizations where id = 'c1301f73-fc3a-4573-ba31-0449ad1d0171'

# 2024-05-16 07:55:14.574730
+select * from timezones where id = 'be88b22b-0af6-4423-90f6-940be61d3bb5 '

# 2024-05-16 07:55:18.333904
+select * from timezones

# 2024-05-16 12:01:49.042441
+exit

# 2024-05-16 12:02:14.368875
+select updated_at from organizations where id = '5c5b6cac-3b8c-4f61-ac13-dcf0aa6aa5e3'

# 2024-05-16 12:02:21.478205
+select * from organizations where id = '5c5b6cac-3b8c-4f61-ac13-dcf0aa6aa5e3'

# 2024-05-16 12:02:27.057473
+select * from organizations;

# 2024-05-16 12:02:35.065847
+select * from organizations where id = '5c5b6cac-3b8c-4f61-ac13-dcf0aa6aa5e3'

# 2024-05-18 15:09:26.982380
+exit

# 2024-05-20 06:44:22.847169
+select count(1) from notification_messages;

# 2024-05-20 06:44:42.555384
+delete from notification_messages

# 2024-05-20 10:40:52.123317
+exit

# 2024-05-23 17:33:59.361212
+select * from logbook_schedules where id = '3116b933-a59c-4f38-b3a7-0e479710b7cd'

# 2024-05-23 17:34:31.439087
+exit

# 2024-05-24 18:11:12.673786
+delete from logbooks where id = '922a9496-c64a-4d85-bb93-e4cc39e33015'

# 2024-05-24 18:12:46.515133
+учше

# 2024-05-24 18:12:47.469573
+exit

# 2024-05-27 21:05:55.152731
+\dt+ tasks

# 2024-05-27 21:05:59.447745
+\t tasks

# 2024-05-27 21:06:01.853399
+\d tasks

# 2024-05-27 21:06:15.426336
+alter table tasks
+    add column status_updated_at timestamp with time zone default now() not null;

# 2024-05-27 21:06:19.501343
+\d tasks

# 2024-05-27 21:06:30.403493
+update tasks
+   set status_updated_at =  updated_at;

# 2024-05-27 21:08:49.086983
+exit

# 2024-05-27 21:12:37.226475
+select * from tasks group by logbook_id

# 2024-05-27 21:12:55.380565
+select * from tasks group by schedule_id

# 2024-05-27 21:13:09.418957
+select count(1) from tasjs

# 2024-05-27 21:13:11.524884
+select count(1) from tasks

# 2024-05-27 21:13:29.141246
+select count(1) from tasks group by id

# 2024-05-27 21:13:44.771264
+select count(id) from tasks group by id

# 2024-05-27 21:13:52.038416
+select id from tasks group by id

# 2024-05-27 21:14:08.474600
+\t tasks

# 2024-05-27 21:14:10.643737
+\d tasks

# 2024-05-27 21:14:25.824257
+select * from tasks group by schedule_id

# 2024-05-27 21:14:35.291197
+select schedule_id from tasks group by schedule_id

# 2024-05-27 21:16:47.990571
+select schedule_id, count(*) from tasks group by schedule_id

# 2024-05-27 21:18:03.889665
+select count(*) from logbook_schedules

# 2024-05-27 21:18:15.914359
+select count(*) from logbook_schedules where deadline_rule

# 2024-05-27 21:18:20.276547
+\d logbook_schedules

# 2024-05-27 21:18:50.647242
+select schedule_id, count(*) from tasks group by schedule_id

# 2024-05-27 21:21:16.868114
+select * from logbook_schedules where id = '0f105191-e38d-4bd1-9fbf-2f9f3098409e'

# 2024-05-27 21:24:20.359807
+select * from tasks where schedule_id = '0f105191-e38d-4bd1-9fbf-2f9f3098409e ' and deleted_at is null

# 2024-05-27 21:24:36.920345
+select * from tasks where schedule_id = '0f105191-e38d-4bd1-9fbf-2f9f3098409e' and deleted_at is null

# 2024-05-27 21:24:47.191941
+select count(1) from tasks where schedule_id = '0f105191-e38d-4bd1-9fbf-2f9f3098409e' and deleted_at is null

# 2024-05-27 21:32:31.132553
+select * from logbook_schedules where id = '0f105191-e38d-4bd1-9fbf-2f9f3098409e'

# 2024-05-30 19:47:46.959849
+\dt+ refresh_tokens

# 2024-05-30 19:47:52.300826
+\d+ refresh_tokens

# 2024-05-30 19:48:02.130233
+select * from refresh_tokens;

# 2024-05-30 19:48:06.904330
+clear

# 2024-05-30 19:58:22.890720
+jjjclear

# 2024-05-30 19:58:25.380881
+exit

# 2024-06-02 10:49:56.054494
+select * from users where id = '0cbf0cc5-7a24-4294-87b9-dac4bc56ef88'

# 2024-06-02 12:04:46.318711
+exit

# 2024-06-13 15:54:04.336403
+select count(*) from notification_messages

# 2024-06-13 15:54:10.904736
+delete * from notification_messages;

# 2024-06-13 15:54:15.585342
+deletefrom notification_messages;

# 2024-06-13 15:54:18.309832
+delete from notification_messages;

# 2024-06-13 18:10:06.281793
+\dt+ logbook_entries

# 2024-06-13 18:10:10.336357
+\dt logbook_entries

# 2024-06-13 18:10:14.427176
+\t logbook_entries

# 2024-06-13 18:10:16.529705
+\d logbook_entries

# 2024-06-13 18:38:59.532827
+select not('{1, 2, 3}'::numeric[] && '{}'::numeric[])

# 2024-06-13 18:39:08.803411
+select not('{1, 2, 3}'::numeric[] && '{1}'::numeric[])

# 2024-06-13 18:39:26.833191
+select not('{1, 2, 3}'::numeric[] && '{4}'::numeric[])

# 2024-06-13 18:51:46.097279
+select to_json('test'::text) #>> '{}';

# 2024-06-13 18:52:19.022144
+select to_json('test'::text) #>> '{}'::text[];

# 2024-06-13 18:52:26.942739
+select to_json('test,test'::text) #>> '{}'::text[];

# 2024-06-13 18:52:42.385813
+select to_json('test'::text) #>> '{}'::text[];

# 2024-06-13 18:53:46.544456
+select to_json('["test", "example"]'::text) #>> '{}'::text[];

# 2024-06-13 18:53:53.927700
+select to_json('["test", "example"]'::text) #>> '{}'::text;

# 2024-06-13 18:54:04.084191
+select to_json('["test", "example"]'::text) #>> '{}'::text[];

# 2024-06-13 18:55:37.873314
+select * from json_array_elements_text('["foo", "bar"]')

# 2024-06-13 18:55:53.334029
+select json_array_elements_text('["foo", "bar"]')

# 2024-06-13 18:55:59.770323
+select json_array_elements_text('["foo", "bar"]') #>> '{}'::text[]

# 2024-06-13 18:56:14.685086
+select '{1, 2, 3}'::text[]

# 2024-06-13 18:56:30.270838
+select to_json('[1, 2, 3]'::text) #>> '{}'::text[];

# 2024-06-13 18:57:56.658638
+select array(json_array_elements_text('["foo", "bar"]'))::text[]

# 2024-06-13 18:57:59.516452
+select array(json_array_elements_text('["foo", "bar"]'))

# 2024-06-13 18:58:04.878858
+select json_array_elements_text('["foo", "bar"]')

# 2024-06-13 18:58:38.397779
+select array(json_array_elements_text('["foo", "bar"]'))

# 2024-06-13 18:58:45.407670
+select json_array_elements_text('["foo", "bar"]')

# 2024-06-13 18:59:23.224818
+select ARRAY(jsonb_array_elements_text('["foo", "bar"]'))

# 2024-06-13 19:01:45.529526
+SELECT ARRAY_AGG(elem) AS text_array FROM (SELECT jsonb_array_elements_text('["foo", "bar"]') AS elem)

# 2024-06-13 19:02:15.642181
+SELECT ARRAY_AGG(elem) AS text_array FROM (SELECT jsonb_array_elements_text('["foo", "bar"]') AS elem) subquery

# 2024-06-13 19:02:32.725018
+SELECT ARRAY_AGG(elem) AS text_array FROM (SELECT jsonb_array_elements_text('[1, 2]') AS elem) subquery

# 2024-06-13 19:06:35.231306
+SELECT ARRAY_AGG(*) FROM (SELECT jsonb_array_elements_text('[1, 2]')) subquery

# 2024-06-13 19:06:45.673697
+SELECT ARRAY_AGG(elem) FROM (SELECT jsonb_array_elements_text('[1, 2]') AS elem) subquery

# 2024-06-14 11:15:13.215534
+\dt+

# 2024-06-14 11:15:56.238321
+select * from logbooks;

# 2024-06-14 11:16:10.217904
+select * from logbooks where stages is not null;

# 2024-06-14 11:16:31.706437
+clear

# 2024-06-14 11:16:47.004202
+select stages from logbooks where stages is not null

# 2024-06-14 11:17:21.143921
+select stages from logbooks where stages::text <> "{}"::text

# 2024-06-14 11:17:27.529920
+select stages from logbooks where stages::text <> '{}':text

# 2024-06-14 11:17:29.580603
+select stages from logbooks where stages::text <> '{}'

# 2024-06-14 11:19:30.623034
+select stages ->> 'employee_position_ids' from logbooks where stages::text <> '{}'

# 2024-06-14 11:19:35.193472
+select stages -> 'employee_position_ids' from logbooks where stages::text <> '{}'

# 2024-06-14 11:19:39.536870
+select stages -> 'employee_position_map' from logbooks where stages::text <> '{}'

# 2024-06-15 00:09:47.105148
+'{1, 2, 3}'::numeric[] && '{}'::numeric[]

# 2024-06-15 00:09:56.864880
+"{1, 2, 3}::numeric[] && '{}'::numeric[]

# 2024-06-15 00:10:01.426603
+"{1, 2, 3}"::numeric[] && '{}'::numeric[]

# 2024-06-15 00:10:05.801110
+"{1, 2, 3}::numeric[] && '{}'::numeric[]

# 2024-06-15 00:10:17.642680
+'{1, 2, 3}'::numeric[] && '{}'::numeric[]

# 2024-06-15 00:10:30.188800
+'{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-15 00:10:58.745260
+ARRAY[1, 2, 3]::numeric[] && ARRAY[]::numeric[]
+

# 2024-06-15 00:11:10.102690
+array[1, 2, 3]::numeric[] && ARRAY[]::numeric[]

# 2024-06-15 00:11:14.295969
+array[1, 2, 3]

# 2024-06-15 00:11:21.025315
+array(1, 2, 3)

# 2024-06-15 00:11:49.288529
+'{1,2,3}'::numeric[]

# 2024-06-15 00:11:57.211936
+select '{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-15 00:18:23.167187
+select '{"asdf"}'::text[] && '{}'::text[]

# 2024-06-15 00:18:31.372362
+select '{"asdf"}'::text[] && '{"asdf"}'::text[]

# 2024-06-15 00:18:35.426745
+select '{"asdf". }'::text[] && '{"asdf"}'::text[]

# 2024-06-15 00:18:43.525821
+select '{"asdf", "vfg"}'::text[] && '{"asdf"}'::text[]

# 2024-06-15 00:18:46.930188
+select '{"asdf"}'::text[] && '{"asdf"}'::text[]

# 2024-06-15 00:18:53.853918
+select '{"asdf"}'::text[] && '{}'::text[]

# 2024-06-15 00:26:45.527553
+        select
+          array_agg(elem)
+        from
+          (select
+            jsonb_array_elements_text() as elem
+          ) subquery

# 2024-06-15 00:27:33.539617
+select array_agg(elem) from (select jsonb_array_elements_text('{1,2,3}'::jsonb) as elem) subquery
+          ) subquery

# 2024-06-15 00:27:42.840310
+select array_agg(elem) from (select jsonb_array_elements_text('{1,2,3}'::jsonb) as elem) subquery

# 2024-06-15 00:27:57.666888
+select array_agg(elem) from (select jsonb_array_elements_text('[1,2,3]'::jsonb) as elem) subquery

# 2024-06-15 00:29:18.541184
+create table if not exists test (id int primary key)

# 2024-06-15 00:29:22.389432
+\d test

# 2024-06-15 00:29:35.782894
+insert into test(id) values (1)

# 2024-06-15 00:29:37.587369
+insert into test(id) values (2)

# 2024-06-15 00:29:39.193179
+insert into test(id) values (3)

# 2024-06-15 00:29:45.431640
+select * from test

# 2024-06-15 00:29:53.517763
+select id from test where id = 5

# 2024-06-15 00:30:07.605364
+select * from test where id = 5

# 2024-06-17 08:22:49.229376
+\d logbook_entries

# 2024-06-17 08:22:57.806896
+\d logbooks

# 2024-06-17 08:27:52.592565
+exit

# 2024-06-17 08:48:03.894453
+select * from logbooks where stages is not null and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:48:10.493425
+clear

# 2024-06-17 08:48:19.248485
+select id, stages from logbooks where stages is not null and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:49:37.375824
+select id, stages from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:50:34.527732
+select id, stages -> 'record1718103412648' from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:51:00.213772
+select id, stages -> 'record1718103412648' ->> 'employee_position_ids' from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:51:12.439170
+select id, stages -> 'record1718103412648' ->> 'employee_position_ids' from logbooks where stagesq is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:51:28.628516
+select id, stages -> 'record1718103412648' ->> 'employee_position_ids' from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7
+ c381e22';

# 2024-06-17 08:51:39.107198
+select id, stages -> 'record1718103412648' ->> 'employee_position_ids' from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:51:52.734591
+select id, stages from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:52:08.379349
+select id, stages -> 'record1718267799789' ->> 'employee_position_ids' from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:52:53.061283
+select stages from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:54:17.097650
+select stages -> 'record1718267799789' from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:54:49.574338
+select json_pretty(stages -> 'record1718267799789') from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:55:29.020542
+select json_pretty(stages ->> 'record1718267799789') from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:55:44.833697
+select jsonb_pretty(stages -> 'record1718267799789') from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:58:30.074444
+select stages from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:58:34.398715
+select jsonb_pretty(stages -> 'record1718267799789') from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 08:59:37.016808
+update logbooks set stages = jsonb_set(stages, '{record1718267799789,employee_position_ids}', '[]')

# 2024-06-17 08:59:40.231697
+select jsonb_pretty(stages -> 'record1718267799789') from logbooks where id = 'e9a94865-8d8c-47b0-b8df-ccaa1c76bfb9' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:00:08.404654
+select id, stages from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:00:45.610341
+select jsonb_pretty(stages -> 'record1715943606030') from logbooks where id = 'caa5e5a9-8414-4a4c-9475-d5233cd79f37' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:01:12.975461
+select jsonb_pretty(stages -> 'record1714722543103') from logbooks where id = '829d11d2-e162-4fb0-b24f-fd013fd8390e' and stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:01:26.250076
+select id, stages from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:01:52.846891
+select id, jsonb_pretty(stages) from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:03:06.569383
+update logbooks set stages = jsonb_set(stages, '{without1715943606030,employee_position_ids}', '[]') where id = 'caa5e5a9-8414-4a4c-9475-d5233cd79f37 '

# 2024-06-17 09:03:15.783422
+update logbooks set stages = jsonb_set(stages, '{without1715943606030,employee_position_ids}', '[]') where id = 'caa5e5a9-8414-4a4c-9475-d5233cd79f37'

# 2024-06-17 09:03:19.344453
+select id, jsonb_pretty(stages) from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:04:25.741398
+update logbooks set stages = jsonb_set(stages, '{without1715759361768,employee_position_ids}', '[]') where id = '829d11d2-e162-4fb0-b24f-fd013fd8390e'

# 2024-06-17 09:04:28.446710
+select id, jsonb_pretty(stages) from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:06:29.079258
+SELECT jsonb_array_elements(stages) AS stage
+    FROM logbooks

# 2024-06-17 09:06:35.320790
+SELECT jsonb_array_elements(stages) AS stage FROM logbooks

# 2024-06-17 09:06:56.600211
+    SELECT
+        id,
+        jsonb_object_agg(
+            key,
+            CASE 
+                WHEN key LIKE 'without%' THEN jsonb_set(value, '{employee_position_ids}', '[]')
+                ELSE value
+            END
+        ) AS new_stages
+    FROM logbooks,
+    jsonb_each(stages) AS stage(key, value)
+    GROUP BY id
+

# 2024-06-17 09:07:54.403154
+WITH updated_stages AS (
+    SELECT
+        id,
+        jsonb_object_agg(
+            key,
+            CASE 
+                WHEN key LIKE 'without%' THEN jsonb_set(value, '{employee_position_ids}', '[]')
+                ELSE value
+            END
+        ) AS new_stages
+    FROM logbooks,
+    jsonb_each(stages) AS stage(key, value)
+    GROUP BY id
+)
+UPDATE logbooks 
+SET stages = updated_stages.new_stages
+FROM updated_stages
+WHERE logbooks.id = updated_stages.id;
+

# 2024-06-17 09:07:57.499610
+clear

# 2024-06-17 09:08:12.316729
+select id, jsonb_pretty(stages) from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 09:09:47.948324
+    SELECT
+        id,
+        jsonb_object_agg(
+            key,
+            CASE 
+                WHEN value->>'employee_position_ids' IS NULL OR value->>'employee_position_ids' = 'null' 
+                THEN jsonb_set(value, '{employee_position_ids}', '[]')
+                ELSE value
+            END
+        ) AS new_stages
+    FROM logbooks,
+    jsonb_each(stages) AS stage(key, value)
+    GROUP BY id
+

# 2024-06-17 09:10:05.334073
+WITH updated_stages AS (
+    SELECT
+        id,
+        jsonb_object_agg(
+            key,
+            CASE 
+                WHEN value->>'employee_position_ids' IS NULL OR value->>'employee_position_ids' = 'null' 
+                THEN jsonb_set(value, '{employee_position_ids}', '[]')
+                ELSE value
+            END
+        ) AS new_stages
+    FROM logbooks,
+    jsonb_each(stages) AS stage(key, value)
+    GROUP BY id
+)
+UPDATE logbooks
+SET stages = updated_stages.new_stages
+FROM updated_stages
+WHERE logbooks.id = updated_stages.id;
+

# 2024-06-17 09:10:13.640737
+select id, jsonb_pretty(stages) from logbooks where stages is not null and stages::text != '{}' and org_id = '3b895684-e7f8-4d1e-a891-c79a7c381e22';

# 2024-06-17 17:19:15.709201
+clear

# 2024-06-18 09:06:46.074133
+'{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-18 09:06:52.019685
+exit

# 2024-06-18 09:07:02.760416
+'{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-18 09:07:09.562318
+exit

# 2024-06-18 09:07:16.219018
+'{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-18 09:07:18.133925
+exit

# 2024-06-18 09:07:35.446133
+'{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-18 09:07:48.079604
+exit

# 2024-06-18 09:08:04.130661
+'{1,2,3}'::numeric[] && '{}'::numeric[]

# 2024-06-18 09:08:19.441588
+'[1,2,3]'::numeric[] && '[]'::numeric[]

# 2024-06-18 09:08:25.247076
+"[1,2,3]"::numeric[] && '[]'::numeric[]

# 2024-06-18 09:08:38.710146
+'{1,2,3}'::text[] && '[]'::text[]

# 2024-06-18 09:09:02.061940
+'{1,2,3}'::text[] && ARRAY[]::text[]

# 2024-06-18 09:09:13.812973
+ARRAY['1', '2', '3']::text[] && ARRAY[]::text[]
+

# 2024-06-18 09:09:25.664134
+select * from range(1, 5)

# 2024-06-18 09:09:30.151721
+select * from lobooks

# 2024-06-18 09:09:35.434779
+select * from logbooks

# 2024-06-18 09:09:45.263415
+'{1,2,3}'::text[]

# 2024-06-18 09:10:05.648975
+'{}'::text[]

# 2024-06-18 09:10:09.097960
+'{}'::[]text

# 2024-06-18 09:10:11.952242
+'{}'

# 2024-06-18 09:10:24.905151
+select coalesce(null,'{}'::text[])

# 2024-06-18 09:10:29.141097
+select coalesce(null, '{}'::text[])

# 2024-06-18 09:10:48.017436
+select '{1,2,3}'::text[] && '{}'::text[]

# 2024-06-18 09:26:57.324393
+select '{}'::text[] && '{}'::text[]

# 2024-06-18 09:32:29.942361
+select array_agg(elem) from (select jsonb_array_elements_text('[]'::jsonb) as elem) subquery

# 2024-06-18 14:29:59.485199
+select stages from logbooks

# 2024-06-18 14:30:06.158617
+select stages from logbooks;

# 2024-06-18 14:30:23.208189
+exit

# 2024-06-18 14:30:28.732959
+a

# 2024-06-18 23:12:40.054833
+select stage from logbooks where id = 'ffff29dd-e482-443a-8e0d-bbc0bdb0895a'

# 2024-06-18 23:12:45.310804
+select stages from logbooks where id = 'ffff29dd-e482-443a-8e0d-bbc0bdb0895a'

# 2024-06-18 23:21:35.621676
+exit

# 2024-06-19 08:42:23.647634
+WITH updated_stages AS (
+    SELECT
+        id,
+        jsonb_object_agg(
+            key,
+            CASE 
+                WHEN value->>'employee_position_ids' IS NULL OR value->>'employee_position_ids' = 'null' 
+                THEN jsonb_set(value, '{employee_position_ids}', '[]')
+                ELSE value
+            END
+        ) AS new_stages
+    FROM logbooks,
+    jsonb_each(stages) AS stage(key, value)
+    GROUP BY id
+)
+UPDATE logbooks
+SET stages = updated_stages.new_stages
+FROM updated_stages
+WHERE logbooks.id = updated_stages.id;
+

# 2024-06-21 15:27:04.153953
+select * from tasks where deleted_at is null

# 2024-06-21 15:27:10.228644
+select * from tasks where deleted_at is null limit 10

# 2024-06-21 15:27:13.623293
+exit

# 2024-06-21 15:27:49.494492
+select * from tasks where deleted_at is null limit 10

# 2024-06-22 20:20:07.316871
+\dt+ tasks

# 2024-06-22 20:20:11.794832
+\d tasks

# 2024-06-22 20:20:25.071081
+select * from tasks where deleted_at is null limit 10

# 2024-06-30 19:18:17.678805
+exit

# 2024-06-30 19:19:14.514476
+\i

# 2024-06-30 19:19:27.338357
+\i demo-big-en-20170815.sql

# 2024-06-30 19:22:07.693022
+\i demo-small-en.zip

# 2024-06-30 19:22:28.378384
+\i demo-small-en-20170815.sql

# 2024-06-30 19:27:33.571288
+\dt+

# 2024-06-30 19:27:47.349595
+EXIT

# 2024-06-30 19:29:18.065714
+\i demo-small-en-20170815.sql

# 2024-06-30 19:34:14.263496
+\dt+

# 2024-06-30 19:34:16.417576
+\d

# 2024-06-30 19:34:19.729120
+\dt

# 2024-06-30 19:35:11.712339
+exit

# 2024-07-01 09:49:07.920192
+\dt+ users

# 2024-07-01 09:49:11.778852
+\d+ users

# 2024-07-01 10:23:30.019431
+exity

# 2024-07-01 10:23:31.020977
+exit

# 2024-07-13 11:22:50.134248
+\dt+

# 2024-07-13 11:23:03.452410
+\d comments

# 2024-07-13 11:23:12.249767
+\d users

# 2024-07-13 11:23:39.405361
+INSERT INTO users (username, email) VALUES ('newuser', 'newuser@example.com')

# 2024-07-13 11:24:28.589596
+select * from users

# 2024-07-13 15:46:26.679554
+exit

# 2024-07-23 10:38:47.992047
+\dt_

# 2024-07-23 10:38:50.376616
+\dt+

# 2024-07-23 10:38:58.858590
+select * from logbook_rights

# 2024-07-23 10:40:37.499991
+ALTER TABLE logbook_rights
+ADD COLUMN user_role TEXT NOT NULL DEFAULT 'admin';

# 2024-07-23 10:40:41.569159
+select * from logbook_rights

# 2024-07-23 10:40:55.101242
+select count(*) from logbook_rights

# 2024-07-23 10:42:29.011052
+\dt+

# 2024-07-23 10:42:52.195877
+
+805 B
+BEGIN;
+create table if not exists right_linked_entities (
+    org_id               uuid not null,
+    logbook_id           uuid not null,
+    user_role            text not null,
+    employee_position_id text not null,
+    permission_type      text not null,
+    entity_id            uuid not null,
+    entity_type          text not null,
+    entity_info          jsonb default '{}'::jsonb not null,
+    created_at           timestamptz default now() not null,
+    updated_at           timestamptz default now() not null,
+    constraint right_linked_entities_pkey
+        primary key (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id),
+    constraint right_linked_entities_fk
+        foreign key (permission_type) references logbook_permissions (permission_type)
+);
+END;

# 2024-07-23 10:43:01.836883
+BEGIN;
+
+create table if not exists right_linked_entities (
+    org_id               uuid not null,
+    logbook_id           uuid not null,
+    user_role            text not null,
+    employee_position_id text not null,
+    permission_type      text not null,
+    entity_id            uuid not null,
+    entity_type          text not null,
+    entity_info          jsonb default '{}'::jsonb not null,
+    created_at           timestamptz default now() not null,
+    updated_at           timestamptz default now() not null,
+
+    constraint right_linked_entities_pkey
+        primary key (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id),
+
+    constraint right_linked_entities_fk
+        foreign key (permission_type) references logbook_permissions (permission_type)
+);
+
+END;
+
+

# 2024-07-23 10:43:09.129620
+select * from right_linked_entities

# 2024-07-23 10:43:26.711212
+select * from logbook_permissions

# 2024-07-23 10:43:34.530893
+BEGIN;
+
+UPDATE logbook_permissions
+SET
+  permission_type = CASE
+    WHEN permission_type = 'read' THEN 'read_qr'
+    WHEN permission_type = 'write' THEN 'write_qr'
+    ELSE permission_type
+  END,
+  title = CASE
+    WHEN permission_type = 'read' THEN 'чтение через qr-код'
+    WHEN permission_type = 'write' THEN 'заполнение через qr-код'
+    ELSE title
+  END,
+  description = CASE
+    WHEN permission_type = 'read' THEN 'при сканировании qr-кода, сотрудник может просмотреть предыдущие записи в журнале'
+    WHEN permission_type = 'write' THEN 'при сканировании qr-кода, сотрудник может внести записи в журнал'
+    WHEN permission_type = 'mobile_list' THEN 'журнал будет доступен на экране “список журналов” мобильного приложения. сотрудник может заполнить журнал удаленно и при сканировании qr-кода, просмотреть предыдущие записи в журнале удаленно и при сканировании qr-кода'
+    ELSE description
+  END
+WHERE
+  permission_type IN ('read', 'write', 'mobile_list');
+
+COMMIT;
+

# 2024-07-23 10:43:40.331477
+select * from logbook_permissions

# 2024-07-23 10:43:42.272576
+clear

# 2024-07-23 10:45:41.339851
+select * from logbook_rights

# 2024-07-23 10:46:06.942713
+delete from logbook_rights

# 2024-07-23 10:46:15.432431
+select * from logbook_rights

# 2024-07-23 10:50:59.549225
+\dt+

# 2024-07-23 10:51:18.387439
+drop table if exists logbook_rights

# 2024-07-23 10:52:04.126070
+BEGIN;
+
+create table if not exists logbook_permissions
+(
+    permission_type             text                                   not null,
+    title                       text                                   not null,
+    description                 text                                   not null,
+    default_value               boolean                                not null,
+    created_at                  timestamp with time zone default now() not null,
+
+    constraint permissions_pk primary key (permission_type)
+);
+
+create table if not exists logbook_rights
+(
+    org_id                 uuid                                   not null,
+    logbook_id             uuid                                   not null,
+    user_role              text                                   not null,
+    employee_position_id   uuid                                   not null,
+    permission_type        text                                   not null,
+    value                  bool                                   not null,
+    created_at             timestamp with time zone default now() not null,
+    updated_at             timestamp with time zone default now() not null,
+
+    constraint logbook_rights_pk primary key (org_id, logbook_id, user_role, employee_position_id, permission_type),
+    constraint logbook_rights_fk foreign key (permission_type) references logbook_permissions (permission_type)
+);
+
+COMMIT;

# 2024-07-23 10:52:09.733771
+select * from logbook_rights

# 2024-07-23 10:55:16.664583
+\dt+

# 2024-07-23 10:55:33.381569
+select * from logbook_permissions

# 2024-07-23 10:55:53.719977
+select * from logbook_rights

# 2024-07-23 10:56:05.932061
+select * from right_linked_entities

# 2024-07-23 13:15:04.894242
+select * from logbook_rights

# 2024-07-24 11:12:14.771167
+select * from right_linked_entities

# 2024-07-24 11:12:16.210354
+exit

# 2024-07-24 11:22:55.710016
+select * from right_linked_entities

# 2024-07-24 11:27:17.335647
+\dt+

# 2024-07-24 11:27:24.747139
+select * from logbook_permissions

# 2024-07-24 11:28:24.577228
+UPDATE logbook_permissions SET name = INITCAP(title);

# 2024-07-24 11:28:30.830179
+UPDATE logbook_permissions SET title = INITCAP(title);

# 2024-07-24 11:28:34.074007
+select * from logbook_permissions

# 2024-07-24 11:28:45.570417
+UPDATE logbook_permissions SET description = INITCAP(description);

# 2024-07-24 11:28:49.146912
+select * from logbook_permissions

# 2024-07-24 12:48:13.033470
+select * from right_linked_entities

# 2024-07-24 13:25:07.585665
+select * from outbox_messages

# 2024-07-24 13:25:18.902527
+delete from outbox_messages

# 2024-07-24 13:25:23.673653
+select * from outbox_messages

# 2024-07-24 13:26:43.459410
+select * from right_linked_entities

# 2024-07-24 13:28:14.467000
+select * from outbox_messages

# 2024-07-24 13:28:17.707972
+select * from right_linked_entities

# 2024-07-24 13:30:09.174559
+select * from outbox_messages

# 2024-07-24 13:30:11.912180
+select * from right_linked_entities

# 2024-07-24 13:30:15.250914
+select * from outbox_messages

# 2024-07-24 13:31:11.520686
+select * from right_linked_entities

# 2024-07-24 13:45:49.952658
+select * from outbox_messages

# 2024-07-24 13:46:49.760891
+select * from right_linked_entities

# 2024-07-24 13:49:00.598817
+drop table if exists right_linked_entities

# 2024-07-24 13:49:02.696319
+BEGIN;
+
+create table if not exists right_linked_entities (
+    org_id               uuid not null,
+    logbook_id           uuid not null,
+    user_role            text not null,
+    employee_position_id text not null,
+    permission_type      text not null,
+    entity_id            text not null,
+    entity_type          text not null,
+    entity_info          jsonb default '{}'::jsonb not null,
+    created_at           timestamptz default now() not null,
+    updated_at           timestamptz default now() not null,
+
+    constraint right_linked_entities_pkey
+        primary key (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id),
+
+    constraint right_linked_entities_fk
+        foreign key (permission_type) references logbook_permissions (permission_type)
+);
+
+END;
+

# 2024-07-24 13:49:04.270125
+clear

# 2024-07-24 13:50:08.345147
+select * from outbox_messages

# 2024-07-24 13:51:09.904476
+select * from right_linked_entities

# 2024-07-24 16:47:01.738465
+select * from outbox_messages

# 2024-07-24 16:48:37.163554
+select * from notification_messages

# 2024-07-24 16:48:43.623153
+select * from notification_messages limit 10

# 2024-07-24 16:49:20.969982
+select * from notification_messages where type = 'control_rule_event' limit 10

# 2024-07-24 16:49:37.690143
+select * from notification_messages where type = 'control_rule_event' limit 10 order by created_at

# 2024-07-24 16:49:44.911182
+select * from notification_messages where type = 'control_rule_event' order by created_at limit 10

# 2024-07-24 16:49:55.847463
+select * from notification_messages where type = 'control_rule_event' order by created_at limit 10 desc

# 2024-07-24 16:49:59.964980
+select * from notification_messages where type = 'control_rule_event' order by created_at desc limit 10

# 2024-07-25 00:48:03.458651
+clear

# 2024-07-25 00:48:19.413150
+delete * from notification_messages where title = 'asdfasdfadsfasdfasdf'

# 2024-07-25 00:48:25.592454
+delete from notification_messages where title = 'asdfasdfadsfasdfasdf'

# 2024-07-25 10:51:42.735421
+select * from notification_messages where type = 'control_rule_event' order by created_at desc limit 10

# 2024-07-25 10:52:15.076637
+delete from notification_messages where title = 'asdfasdfadsfasdfasdf'

# 2024-07-25 10:52:18.594679
+select * from notification_messages where type = 'control_rule_event' order by created_at desc limit 10

# 2024-07-25 10:52:20.618577
+clear

# 2024-07-25 10:52:27.511098
+select * from right_linked_entities

# 2024-07-25 10:52:39.959060
+delete from right_linked_entities

# 2024-07-25 10:54:01.869491
+select * from right_linked_entities

# 2024-07-25 10:54:22.092328
+select * from outbox_messages

# 2024-07-25 10:56:11.515289
+select * from right_linked_entities

# 2024-07-25 11:14:18.941060
+clear

# 2024-07-25 11:14:22.684364
+delete from right_linked_entities

# 2024-07-25 11:14:28.539251
+delete from outbox_messages

# 2024-07-25 14:06:18.325067
+select * from right_linked_entities

# 2024-07-25 14:06:20.422130
+clear

# 2024-07-25 14:06:31.396420
+select * from logbook_rights where logbook_id = '48175149-c953-4ea1-b0a2-70c137b8945b'

# 2024-07-25 14:41:55.201746
+select * from right_linked_entities

# 2024-07-25 14:42:01.244312
+delete from right_linked_entities

# 2024-07-25 14:42:08.080465
+delete from outbox_messages

# 2024-07-26 11:54:33.380580
+select * from right_linked_entities

# 2024-07-26 11:54:41.574174
+select * from logbook_permissions

# 2024-07-26 11:55:43.618845
+update logbook_permissions set description = lower(description)

# 2024-07-26 11:55:51.641666
+select * from logbook_permissions

# 2024-07-26 11:58:19.468540
+select * from upper(substring('hello' from 1 for 1)) ||
+          substring('hello' from 2 for length('hello'))

# 2024-07-26 11:58:35.928869
+select * from (upper(substring('hello' from 1 for 1)) || substring('hello' from 2 for length('hello')))

# 2024-07-26 11:58:48.862559
+select * from (upper(substring('hello' from 1 for 1)))

# 2024-07-26 11:58:52.886915
+select * from upper(substring('hello' from 1 for 1))

# 2024-07-26 12:01:53.733946
+select * from concat(upper(substring('hello' from 1 for 1)), substring('hello' from 2 for length('hello'))))

# 2024-07-26 12:01:56.141513
+select * from concat(upper(substring('hello' from 1 for 1)), substring('hello' from 2 for length('hello')))

# 2024-07-26 12:03:26.983162
+update logbook_permissions set description = concat(upper(substring(description from 1 for 1)), substring(description from 2 for length(description))) where permission_type = 'read_qr'

# 2024-07-26 12:03:36.886187
+select * from logbook_permissions

# 2024-07-26 12:03:44.941002
+update logbook_permissions set description = concat(upper(substring(description from 1 for 1)), substring(description from 2 for length(description))) where permission_type = 'write_qr'

# 2024-07-26 12:03:49.737200
+select * from logbook_permissions

# 2024-07-26 12:04:35.164630
+select description from logbook_permissions where permission_type = 'mobile_list'

# 2024-07-26 12:04:41.455547
+clear

# 2024-07-26 12:05:24.512367
+select description from logbook_permissions where permission_type = 'mobile_list'

# 2024-07-26 12:05:40.446460
+update logbook_permissions set description = 'Журнал будет доступен на экране “список журналов” мобильного приложения. Сотрудник может заполнить журнал удаленно и при сканировании qr-кода, просмотреть предыдущие записи в журнале удаленно и при сканировании qr-кода' where permission_type = 'mobile_list'

# 2024-07-26 12:05:47.059168
+select * from logbook_permissions

# 2024-07-31 11:39:14.387433
+select count(*) from logbook_rights

# 2024-07-31 11:39:22.723191
+select count(*) from logbooks

# 2024-07-31 11:39:28.794324
+select count(*) from employee_positions

# 2024-07-31 11:40:33.459483
+select count(*) from logbook_rights

# 2024-07-31 11:41:05.746764
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id,
+    l.id as logbook_id,
+    'user' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+
+

# 2024-07-31 11:41:37.068014
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'user' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+
+

# 2024-07-31 11:41:45.703921
+select count(*) from logbook_rights

# 2024-07-31 11:41:48.722969
+exit

# 2024-07-31 11:41:57.722539
+select count(*) from logbook_rights

# 2024-07-31 11:42:12.032184
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+

# 2024-07-31 11:42:28.141036
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+

# 2024-07-31 11:42:43.983383
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'user' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;

# 2024-07-31 11:42:56.151735
+select * from logbook_rights

# 2024-07-31 11:43:03.308153
+select count(*) from logbook_rights

# 2024-07-31 12:17:26.450702
+учше

# 2024-07-31 12:17:27.596615
+exit

# 2024-08-01 17:20:56.763440
+INSERT INTO logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+SELECT
+    l.org_id::uuid,
+    l.id AS logbook_id,
+    'admin' AS user_role,
+    e.id AS employee_position_id,
+    permission.permission_type,
+    true AS value
+FROM
+    logbooks AS l
+CROSS JOIN
+    employee_positions AS e
+CROSS JOIN (
+    VALUES
+        ('mobile_list'),
+        ('write_qr'),
+        ('read_qr')
+) AS permission(permission_type)
+WHERE
+    l.org_id = e.org_id
+ON CONFLICT (org_id, logbook_id, user_role, employee_position_id, permission_type)
+DO NOTHING;
+

# 2024-08-01 17:21:23.592919
+INSERT INTO logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+SELECT
+    l.org_id::uuid,
+    l.id AS logbook_id,
+    'admin' AS user_role,
+    e.id AS employee_position_id,
+    permission.permission_type,
+    true AS value
+FROM
+    logbooks AS l
+CROSS JOIN
+    employee_positions AS e
+CROSS JOIN (
+    VALUES
+        ('mobile_list'),
+        ('write_qr'),
+        ('read_qr')
+) AS permission(permission_type)
+WHERE
+    l.org_id::uuid = e.org_id
+ON CONFLICT (org_id, logbook_id, user_role, employee_position_id, permission_type)
+DO NOTHING;
+

# 2024-08-01 17:29:29.582754
+DELETE FROM notification_messages WHERE data->>'is_completed' = 'true'::jsonb;

# 2024-08-01 17:29:47.466213
+DELETE FROM notification_messages WHERE data->>'is_completed' = 'true'

# 2024-08-01 17:45:22.813500
+select to_jsonb('true')

# 2024-08-01 17:45:29.110799
+select * from to_jsonb('true')

# 2024-08-01 17:45:39.055377
+select to_jsonb("true")

# 2024-08-01 17:45:44.049552
+select to_jsonb()

# 2024-08-02 10:03:13.885253
+select * from logbook_rights

# 2024-08-02 10:04:07.506161
+select * from notification_messages where data ->> 'is_completed'::jsonb = to_jsonb('true')

# 2024-08-02 10:04:15.941362
+select * from notification_messages where data ->> 'is_completed' = to_jsonb('true')

# 2024-08-02 10:04:49.694472
+select * from notification_messages where data->>'is_completed' = 'true'

# 2024-08-02 10:05:10.810364
+DELETE FROM notification_messages WHERE data->>'is_completed' = 'true'

# 2024-08-02 10:05:14.534159
+select * from notification_messages where data->>'is_completed' = 'true'

# 2024-08-02 22:35:07.287607
+select 42

# 2024-08-02 22:35:12.950352
+select 42, 'hello'

# 2024-08-04 21:57:44.715072
+select * from right_linked_entities

# 2024-08-04 21:58:20.823580
+delete * from right_linked_entities where id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-04 21:58:27.439319
+delete from right_linked_entities where id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-04 21:58:37.354509
+delete from right_linked_entities where logbook_id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-04 21:59:03.904759
+select * from where logbook_id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-04 21:59:10.894953
+select * from right_linked_entities where logbook_id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-05 02:19:33.705590
+delete from right_linked_entities where logbook_id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-05 02:20:05.775903
+select * from right_linked_entities where logbook_id = '91991026-0c0c-4a10-8251-271169ac5c8e'

# 2024-08-05 02:22:40.600578
+select * from right_linked_entities where logbook_id = '374b9abf-c169-44be-ac8c-f65f8b9e5bae'

# 2024-08-05 05:09:38.390082
+select * from right_linked_entities where logbook_id = 'a9b6dc59-ddd0-407e-9114-09f50640799b'

# 2024-08-06 09:06:13.541214
+select * from logbooks limit 1x

# 2024-08-06 09:06:32.281224
+select * from control_rules limit 1;

# 2024-08-06 09:06:51.518167
+\dt+ control_rules

# 2024-08-06 09:06:56.217040
+\d+ control_rules

# 2024-08-06 09:23:45.080949
+INSERT INTO logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+SELECT
+    cr.org_id::uuid,
+    cr.logbook_id,
+    user_role,
+    position_id AS employee_position_id,
+    'read_qr' AS permission_type,
+    true AS value
+FROM
+    control_rules AS cr,
+    jsonb_array_elements_text(cr.positions_for_notification) AS position_id,
+    (VALUES ('admin'), ('user')) AS roles(user_role)
+ON CONFLICT (org_id, logbook_id, user_role, employee_position_id, permission_type)
+DO NOTHING;
+

# 2024-08-06 09:24:18.601634
+INSERT INTO logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+SELECT
+    cr.org_id::uuid,
+    cr.logbook_id,
+    user_role,
+    position_id::uuid AS employee_position_id,
+    'read_qr' AS permission_type,
+    true AS value
+FROM
+    control_rules AS cr,
+    jsonb_array_elements_text(cr.positions_for_notification) AS position_id,
+    (VALUES ('admin'), ('user')) AS roles(user_role)
+ON CONFLICT (org_id, logbook_id, user_role, employee_position_id, permission_type)
+DO NOTHING;

# 2024-08-06 09:49:30.609586
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  jsonb_array_elements_text(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  jsonb_array_elements_text(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  jsonb_array_elements_text(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  jsonb_array_elements_text(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+
+

# 2024-08-06 09:52:37.130157
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+
+

# 2024-08-06 09:52:51.691304
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 09:52:53.848926
+exit

# 2024-08-06 09:53:53.393281
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 09:54:04.490000
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 09:54:18.483814
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 09:54:30.071953
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 09:54:36.507379
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+
+

# 2024-08-06 09:57:35.721117
+BEGIN;
+
+DELETE FROM logbook_rights
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM logbook_rights
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'read_qr' AS permission_type
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.overdue_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.overdue_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+COMMIT;
+
+

# 2024-08-06 09:58:40.772393
+BEGIN;
+
+DELETE FROM logbook_rights
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM logbook_rights
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'read_qr' AS permission_type
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.overdue_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.overdue_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+COMMIT;
+
+

# 2024-08-06 09:58:45.832441
+rollback

# 2024-08-06 09:58:47.811359
+BEGIN;
+
+DELETE FROM logbook_rights
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM logbook_rights
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'read_qr' AS permission_type
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.overdue_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.overdue_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+
+COMMIT;
+
+

# 2024-08-06 09:58:56.744030
+rollback

# 2024-08-06 09:59:14.983358
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+

# 2024-08-06 09:59:44.218989
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id::text AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+

# 2024-08-06 10:00:09.689287
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id::uuid,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id::uuid AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+

# 2024-08-06 10:01:26.593021
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id::uuid,
+  user_role,
+  position_id::uuid AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id::text AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+

# 2024-08-06 10:01:55.756022
+DELETE FROM right_linked_entities
+WHERE (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) IN (
+SELECT
+  ls.org_id::uuid,
+  ls.logbook_id::uuid,
+  user_role,
+  position_id AS employee_position_id,
+  'write_qr' AS permission_type,
+  ls.id::text AS entity_id
+FROM
+  logbook_schedules AS ls,
+  UNNEST(ls.responsible_employee_positions) AS position_id,
+  (VALUES ('admin'), ('user')) AS roles(user_role)
+);
+

# 2024-08-06 10:02:55.780850
+BEGIN;
+
+delete from logbook_rights
+where (org_id, logbook_id, user_role, employee_position_id, permission_type) in (
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+);
+
+delete from logbook_rights
+where (org_id, logbook_id, user_role, employee_position_id, permission_type) in (
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+);
+
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+select
+  ls.org_id::uuid,
+  ls.logbook_id::uuid,
+  user_role,
+  position_id as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id::text as entity_id
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+);
+
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id::text as entity_id
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+);
+
+COMMIT;
+
+

# 2024-08-06 11:46:45.463666
+select * from logbooks where stages is not null;

# 2024-08-06 12:03:44.833201
+rollback

# 2024-08-06 12:03:51.789796
+select * from logbooks where stages is not null limit 1

# 2024-08-06 12:03:53.289136
+exit

# 2024-08-06 12:04:16.511401
+select * from logbooks where stages is not null limit 1

# 2024-08-06 12:06:23.261452
+select stages from logbooks where stages is not null limit 1

# 2024-08-06 12:06:43.559183
+select stages ->  from logbooks where stages is not null limit 1

# 2024-08-06 12:06:43.701392
+''

# 2024-08-06 12:06:53.018610
+select stages -> 'employee_position_ids' from logbooks where stages is not null limit 1

# 2024-08-06 12:06:57.904643
+select stages -> 'employee_position_id' from logbooks where stages is not null limit 1

# 2024-08-06 12:07:21.595422
+select jsonb_pretty(stages) from logbooks where stages is not null limit 1

# 2024-08-06 12:10:02.676638
+WITH json_data AS (
+    SELECT '{
+        "stage_1": {"employee_position_ids": ["position_1", "position_2"]},
+        "stage_2": {"employee_position_ids": ["position_3"]},
+        "stage_3": {"employee_position_ids": ["position_4", "position_5"]},
+        "stage_n": {"employee_position_ids": []}
+    }'::jsonb AS data
+),
+stages AS (
+    SELECT
+        key,
+        value->'employee_position_ids' AS employee_position_ids
+    FROM
+        json_data,
+        jsonb_each(data)  -- Extracts each key-value pair from the outer JSON object
+),
+flattened_positions AS (
+    SELECT
+        jsonb_array_elements(employee_position_ids) AS position_id
+    FROM
+        stages
+    WHERE
+        employee_position_ids IS NOT NULL
+)
+
+SELECT * FROM flattened_positions;
+

# 2024-08-06 12:11:10.393099
+with stages as (
+    select
+        key,
+        value->'employee_position_ids' as employee_position_ids
+    from
+        logbooks as l,
+        jsonb_each(l.stages)
+),
+flattened_positions as (
+    select
+        jsonb_array_elements(employee_position_ids) as position_id
+    from
+        stages
+    where
+        employee_position_ids is not null
+)
+
+select * from flattened_positions;
+

# 2024-08-06 12:17:38.734881
+BEGIN;
+
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  fp.position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_positions as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 12:17:58.617076
+BEGIN;
+
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  fp.position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 12:18:02.482747
+rollback

# 2024-08-06 12:18:12.029261
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  fp.position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 12:19:44.490006
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id -> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 12:20:08.080670
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 12:25:46.870256
+select count(*) from logbooks where stages is not null and stages != '{}'::jsonb

# 2024-08-06 12:34:54.477190
+with flattened_employee_position_ids as (
+    select
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)

# 2024-08-06 12:35:00.666310
+with flattened_employee_position_ids as (
+    select
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+) select * from flattened_employee_position_ids

# 2024-08-06 12:36:35.733704
+with flattened_employee_position_ids as (
+    select
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+) select * from flattened_employee_position_ids

# 2024-08-06 12:38:45.219438
+select jsonb_pretty(stages) from logbooks where stages is not null limit 1

# 2024-08-06 12:41:17.727064
+BEGIN;
+
+with flattened_employee_position_ids as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids
+              value->'title' as stage_title,
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  fp.org_id,
+  fp.logbook_id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  fp.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', fp.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 12:41:41.530133
+with flattened_employee_position_ids as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title,
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  fp.org_id,
+  fp.logbook_id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  fp.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', fp.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:41:53.181332
+with flattened_employee_position_ids as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  fp.org_id,
+  fp.logbook_id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  fp.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', fp.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:41:56.805134
+rollback

# 2024-08-06 12:42:08.731201
+with flattened_employee_position_ids as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  fp.org_id,
+  fp.logbook_id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  fp.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', fp.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:46:00.145831
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+    from
+        (
+          select
+              value->'employee_position_ids' as employee_position_ids,
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+with flattened_employee_position_ids as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  fp.org_id,
+  fp.logbook_id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  fp.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', fp.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:47:09.468750
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              value->'employee_position_ids' as employee_position_ids,
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+with logbook_stage_info as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  lsi.org_id,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:47:34.752617
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              value->'employee_position_ids' as employee_position_ids,
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 12:47:54.132340
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+

# 2024-08-06 12:48:07.232329
+with logbook_stage_info as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  lsi.org_id,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:48:32.251414
+with logbook_stage_info as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  lsi.org_id::uuid,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+

# 2024-08-06 12:48:52.160679
+BEGIN;
+
+with flattened_employee_position_ids as (
+    select
+        jsonb_array_elements(stages.employee_position_ids) as position_id
+    from
+        (
+          select
+              value->'employee_position_ids' as employee_position_ids
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+with logbook_stage_info as (
+    select
+        org_id,
+        logbook_id,
+        key as stage_id,
+        jsonb_array_elements(stages.employee_position_ids) as position_id,
+        stage_title
+    from
+        (
+          select
+              l.org_id as org_id,
+              l.id as logbook_id,
+              key,
+              value->'employee_position_ids' as employee_position_ids,
+              value->'title' as stage_title
+          from
+              logbooks as l,
+              jsonb_each(l.stages)
+        ) as stages
+    where
+        employee_position_ids is not null
+)
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  lsi.org_id::uuid,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 12:50:06.994390
+select * from json_array_elements('[1,true, [2,false]]')

# 2024-08-06 12:50:26.209120
+select * from json_array_elements('["a", "b", "c"]')

# 2024-08-06 12:50:36.042794
+select * from json_array_elements('["a", "b", "c"]') as f

# 2024-08-06 12:50:44.569156
+select f.value from json_array_elements('["a", "b", "c"]') as f

# 2024-08-06 12:50:53.730800
+select f.value ->> 0 from json_array_elements('["a", "b", "c"]') as f

# 2024-08-06 12:51:16.887742
+select f.value ->> 0 from json_array_elements('["a": {"B": ["c]}]') as f

# 2024-08-06 12:51:21.290522
+select f.value ->> 0 from json_array_elements('["a": {"b": ["c"]}]') as f

# 2024-08-06 12:51:33.082056
+select f.value ->> 0 from json_array_elements('{"a": {"b": ["c"]}}') as f

# 2024-08-06 12:51:51.035869
+select f.value ->> 0 from jsonb_each('{"a": {"b": ["c"]}}') as f

# 2024-08-06 12:51:59.166593
+select * from jsonb_each('{"a": {"b": ["c"]}}')

# 2024-08-06 12:52:18.165811
+select value -> "b" from jsonb_each('{"a": {"b": ["c"]}}')

# 2024-08-06 12:52:22.181636
+select value ->  from jsonb_each('{"a": {"b": ["c"]}}')

# 2024-08-06 12:52:26.406733
+select value -> 'b' from jsonb_each('{"a": {"b": ["c"]}}')

# 2024-08-06 12:52:58.152170
+select jsonb_array_elements(value -> 'b') from jsonb_each('{"a": {"b": ["c"]}}')

# 2024-08-06 12:53:06.565219
+select jsonb_array_elements(value -> 'b') from jsonb_each('{"a": {"b": ["c", "d", "t"]}}')

# 2024-08-06 12:53:11.069624
+select jsonb_array_elements(value -> 'b') from jsonb_each('{"a": {"b": ["c", "d", "t", "t"]}}')

# 2024-08-06 13:03:11.247500
+delete from logbook_rights
+where (org_id, logbook_id, user_role, employee_position_id, permission_type) in (
+    select
+        l.org_id::uuid,
+        l.id,
+        user_role,
+        (fp.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type
+    from
+        logbooks as l,
+        jsonb_each(l.stages) as stages,
+        jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id,
+        (values ('admin'), ('user')) as roles(user_role)
+    where
+        stages.value -> 'employee_position_ids' is not null
+);
+

# 2024-08-06 13:03:59.880085
+delete from logbook_rights
+where (org_id, logbook_id, user_role, employee_position_id, permission_type) in (
+    select
+        l.org_id::uuid,
+        l.id,
+        user_role,
+        (position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type
+    from
+        logbooks as l,
+        jsonb_each(l.stages) as stages,
+        jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id,
+        (values ('admin'), ('user')) as roles(user_role)
+    where
+        stages.value -> 'employee_position_ids' is not null
+);
+

# 2024-08-06 13:04:09.783880
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:04:24.901132
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id::uuid, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:07:01.032490
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id::uuid as entity_id
+    from
+        (
+            select 
+                org_id, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:07:14.542685
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id::uuid,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:07:40.521502
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id::uuid, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:07:59.512432
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);

# 2024-08-06 13:08:39.674830
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id::uuid,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id::uuid as entity_id
+    from
+        (
+            select 
+                org_id::uuid, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);

# 2024-08-06 13:09:00.638722
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id::uuid,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id::uuid as entity_id
+    from
+        (
+            select 
+                org_id::uuid, 
+                logbook_id::uuid, 
+                key as stage_id::uuid, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);

# 2024-08-06 13:09:12.611056
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id::uuid,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id::uuid as entity_id
+    from
+        (
+            select 
+                org_id::uuid, 
+                logbook_id::uuid, 
+                key::uuid as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);

# 2024-08-06 13:10:43.038762
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id, 
+                logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:12:09.394024
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                org_id, 
+                l.id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:12:33.357534
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                l.org_id as org_id, 
+                l.id as logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:14:26.836922
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0) as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                l.org_id as org_id, 
+                l.id as logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+

# 2024-08-06 13:14:34.982614
+BEGIN;
+
+delete from logbook_rights
+where (org_id, logbook_id, user_role, employee_position_id, permission_type) in (
+    select
+        l.org_id::uuid,
+        l.id,
+        user_role,
+        (position_id ->> 0)::uuid as employee_position_id,
+        'write_qr' as permission_type
+    from
+        logbooks as l,
+        jsonb_each(l.stages) as stages,
+        jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id,
+        (values ('admin'), ('user')) as roles(user_role)
+    where
+        stages.value -> 'employee_position_ids' is not null
+);
+
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+    select
+        lsi.org_id::uuid,
+        lsi.logbook_id,
+        user_role,
+        (lsi.position_id ->> 0) as employee_position_id,
+        'write_qr' as permission_type,
+        lsi.stage_id as entity_id
+    from
+        (
+            select 
+                l.org_id as org_id, 
+                l.id as logbook_id, 
+                key as stage_id, 
+                jsonb_array_elements(stages.value -> 'employee_position_ids') as position_id, 
+                stages.value -> 'title' as stage_title 
+            from 
+                logbooks as l, 
+                jsonb_each(l.stages) as stages 
+            where 
+                stages.value -> 'employee_position_ids' is not null
+        ) as lsi,
+        (values ('admin'), ('user')) as roles(user_role)
+);
+
+COMMIT;
+
+

# 2024-08-06 13:26:41.940014
+delete from right_linked_entities

# 2024-08-06 13:26:47.518411
+delete from logbook_rights

# 2024-08-06 13:27:27.658441
+select count(*) from logbook_rights

# 2024-08-06 13:28:13.509745
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'read_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'user' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:28:26.560576
+BEGIN;
+
+delete from logbook_rights
+where (org_id, logbook_id, user_role, employee_position_id, permission_type) in (
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+);
+
+delete from right_linked_entities
+where (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id) in (
+select
+  cr.org_id,
+  cr.logbook_id,
+  'admin' as user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id
+);
+
+COMMIT;
+

# 2024-08-06 13:28:42.653176
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  cr.org_id,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id,
+  'control_rule' as entity_type,
+  jsonb_build_object('title', cr.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:28:46.160921
+rollback

# 2024-08-06 13:28:47.824809
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  cr.org_id,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id,
+  'control_rule' as entity_type,
+  jsonb_build_object('title', cr.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:28:57.184938
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:29:05.444601
+BEGIN;
+
+with flattened_employee_position_ids as (
+  select
+    jsonb_array_elements(stages.employee_position_ids) as position_id
+  from
+    (
+      select
+        value -> 'employee_position_ids' as employee_position_ids
+      from
+        logbooks as l,
+        jsonb_each(l.stages)
+    ) as stages
+  where
+    employee_position_ids is not null
+) insert into logbook_rights (
+  org_id, logbook_id, user_role, employee_position_id,
+  permission_type, value
+)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (
+    values
+      ('admin'),
+      ('user')
+  ) as roles(user_role) on conflict (
+    org_id, logbook_id, user_role, employee_position_id,
+    permission_type
+  ) do nothing;
+
+
+with logbook_stage_info as (
+  select
+    org_id,
+    logbook_id,
+    key as stage_id,
+    jsonb_array_elements(stages.employee_position_ids) as position_id,
+    stage_title
+  from
+    (
+      select
+        l.org_id as org_id,
+        l.id as logbook_id,
+        key,
+        value -> 'employee_position_ids' as employee_position_ids,
+        value -> 'title' as stage_title
+      from
+        logbooks as l,
+        jsonb_each(l.stages)
+    ) as stages
+  where
+    employee_position_ids is not null
+) insert into right_linked_entities (
+  org_id, logbook_id, user_role, employee_position_id,
+  permission_type, entity_id, entity_type,
+  entity_info, created_at, updated_at
+)
+select
+  lsi.org_id::uuid,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (
+    values
+      ('admin'),
+      ('user')
+  ) as roles(user_role) on conflict (
+    org_id, logbook_id, user_role, employee_position_id,
+    permission_type, entity_id
+  ) do nothing;
+
+COMMIT;
+

# 2024-08-06 13:29:15.767415
+select count(*) from logbook_rights

# 2024-08-06 13:32:02.070281
+select * from right_linked_entities where logbook_id = '004929b6-b0ad-4426-90d0-45afb828f71b'

# 2024-08-06 13:32:49.703555
+select * from employee_positions where title = 'Сотрудник тестер'

# 2024-08-06 13:33:33.312995
+select * from employee_positions where title = 'Сотрудник тестер' and org_id = (select org_id from logbooks where id = '004929b6-b0ad-4426-90d0-45afb828f71b')

# 2024-08-06 13:33:40.397481
+select * from employee_positions where title = 'Сотрудник тестер' and org_id in (select org_id from logbooks where id = '004929b6-b0ad-4426-90d0-45afb828f71b')

# 2024-08-06 13:33:49.902475
+select * from employee_positions where title = 'Сотрудник тестер' and org_id::uuid in (select org_id from logbooks where id = '004929b6-b0ad-4426-90d0-45afb828f71b')

# 2024-08-06 13:33:57.429293
+select * from employee_positions where title = 'Сотрудник тестер' and org_id in (select org_id::text from logbooks where id = '004929b6-b0ad-4426-90d0-45afb828f71b')

# 2024-08-06 13:34:03.504171
+select * from employee_positions where title = 'Сотрудник тестер' and org_id::text in (select org_id::text from logbooks where id = '004929b6-b0ad-4426-90d0-45afb828f71b')

# 2024-08-06 13:34:23.396663
+select * from right_linked_entities where logbook_id = '004929b6-b0ad-4426-90d0-45afb828f71b' and employee_position_id = 'b5a9af74-8eb5-4ebc-b0fa-69eb7d59a459'

# 2024-08-06 13:37:16.152150
+delete from right_linked_entities

# 2024-08-06 13:37:22.874036
+delete from logbook_rights

# 2024-08-06 13:37:39.086656
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  cr.org_id,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id,
+  'control_rule' as entity_type,
+  jsonb_build_object('title', cr.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where 
+  cr.deleted_at is null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:38:09.004043
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  cr.org_id,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id,
+  'control_rule' as entity_type,
+  jsonb_build_object('title', cr.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where 
+  cr.deleted_at is not null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:38:34.998724
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where
+  ls.deleted_at is not null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where
+  ls.deleted_at is not null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:38:41.303751
+BEGIN;
+
+with flattened_employee_position_ids as (
+  select
+    jsonb_array_elements(stages.employee_position_ids) as position_id
+  from
+    (
+      select
+        value -> 'employee_position_ids' as employee_position_ids
+      from
+        logbooks as l,
+        jsonb_each(l.stages)
+    ) as stages
+  where
+    employee_position_ids is not null
+) insert into logbook_rights (
+  org_id, logbook_id, user_role, employee_position_id,
+  permission_type, value
+)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (
+    values
+      ('admin'),
+      ('user')
+  ) as roles(user_role) on conflict (
+    org_id, logbook_id, user_role, employee_position_id,
+    permission_type
+  ) do nothing;
+
+
+with logbook_stage_info as (
+  select
+    org_id,
+    logbook_id,
+    key as stage_id,
+    jsonb_array_elements(stages.employee_position_ids) as position_id,
+    stage_title
+  from
+    (
+      select
+        l.org_id as org_id,
+        l.id as logbook_id,
+        key,
+        value -> 'employee_position_ids' as employee_position_ids,
+        value -> 'title' as stage_title
+      from
+        logbooks as l,
+        jsonb_each(l.stages)
+      where
+        l.deleted_at is null
+    ) as stages
+  where
+    employee_position_ids is not null
+) insert into right_linked_entities (
+  org_id, logbook_id, user_role, employee_position_id,
+  permission_type, entity_id, entity_type,
+  entity_info, created_at, updated_at
+)
+select
+  lsi.org_id::uuid,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (
+    values
+      ('admin'),
+      ('user')
+  ) as roles(user_role) on conflict (
+    org_id, logbook_id, user_role, employee_position_id,
+    permission_type, entity_id
+  ) do nothing;
+
+COMMIT;
+

# 2024-08-06 13:38:48.742482
+clear

# 2024-08-06 13:39:17.387518
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'read_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'user' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:39:41.709408
+select * from right_linked_entities where logbook_id = '004929b6-b0ad-4426-90d0-45afb828f71b' and employee_position_id = 'b5a9af74-8eb5-4ebc-b0fa-69eb7d59a459'

# 2024-08-06 13:43:58.328194
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d', '1602dba0-16f8-4da8-956a-e3676dba25dc', 'fe7c7ced-071c-440a-866c-70a90ddad6aa', )

# 2024-08-06 13:44:10.095336
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d', '1602dba0-16f8-4da8-956a-e3676dba25dc', 'fe7c7ced-071c-440a-866c-70a90ddad6aa', 'd447a57-8b0f-40f4-b94f-a6d64b624199')

# 2024-08-06 13:44:41.933286
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b'::uuid, '91b6a378-3608-43d5-a0c1-e5ff3324655d'::uuid, '1602dba0-16f8-4da8-956a-e3676dba25dc'::uuid, 'fe7c7ced-071c-440a-866c-70a90ddad6aa'::uuid, 'd447a57-8b0f-40f4-b94f-a6d64b624199'::uuid)

# 2024-08-06 13:44:53.430793
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b')

# 2024-08-06 13:45:03.240889
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d')

# 2024-08-06 13:45:13.682340
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d', '1602dba0-16f8-4da8-956a-e3676dba25dc')

# 2024-08-06 13:45:35.867540
+select org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d', '1602dba0-16f8-4da8-956a-e3676dba25dc', 'fe7c7ced-071c-440a-866c-70a90ddad6aa', '5d447a57-8b0f-40f4-b94f-a6d64b624199')

# 2024-08-06 13:45:43.965534
+select distinct org_id from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d', '1602dba0-16f8-4da8-956a-e3676dba25dc', 'fe7c7ced-071c-440a-866c-70a90ddad6aa', '5d447a57-8b0f-40f4-b94f-a6d64b624199')

# 2024-08-06 13:46:21.699397
+select deleted_at from control_rules where id in ('4ce84362-0156-48db-8d68-d66b30472b7b', '91b6a378-3608-43d5-a0c1-e5ff3324655d', '1602dba0-16f8-4da8-956a-e3676dba25dc', 'fe7c7ced-071c-440a-866c-70a90ddad6aa',
+ '5d447a57-8b0f-40f4-b94f-a6d64b624199')

# 2024-08-06 13:47:55.775155
+delete from right_linked_entities where type = "control_rule"

# 2024-08-06 13:48:01.519936
+delete from right_linked_entities where type = 'control_rule'

# 2024-08-06 13:48:17.712407
+delete from right_linked_entities where entity_type = 'control_rule'

# 2024-08-06 13:48:27.634051
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  cr.org_id,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id,
+  'control_rule' as entity_type,
+  jsonb_build_object('title', cr.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where
+  cr.deleted_at is null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:48:40.686057
+select * from right_linked_entities where logbook_id = '004929b6-b0ad-4426-90d0-45afb828f71b' and employee_position_id = 'b5a9af74-8eb5-4ebc-b0fa-69eb7d59a459'

# 2024-08-06 13:50:13.395558
+delete from logbook_rights

# 2024-08-06 13:50:44.750370
+delete from right_linked_entities

# 2024-08-06 13:50:55.239020
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'mobile_list' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'admin' as user_role,
+    e.id as employee_position_id,
+    'read_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+    l.org_id::uuid,
+    l.id as logbook_id,
+    'user' as user_role,
+    e.id as employee_position_id,
+    'write_qr' as permission_type,
+    true as value
+from
+    logbooks as l
+cross join
+    employee_positions as e
+where
+  l.org_id::uuid = e.org_id
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:51:34.523587
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  cr.org_id::uuid,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  cr.org_id,
+  cr.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  cr.id as entity_id,
+  'control_rule' as entity_type,
+  jsonb_build_object('title', cr.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  control_rules as cr,
+  jsonb_array_elements_text(cr.positions_for_notification) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where
+  cr.deleted_at is null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:51:42.760475
+BEGIN;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into logbook_rights (org_id, logbook_id, user_role, employee_position_id, permission_type, value)
+select
+  ls.org_id::uuid,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'read_qr' as permission_type,
+  true as value
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.responsible_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where
+  ls.deleted_at is null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+insert into right_linked_entities (
+  org_id,
+  logbook_id,
+  user_role,
+  employee_position_id,
+  permission_type,
+  entity_id,
+  entity_type,
+  entity_info,
+  created_at,
+  updated_at
+)
+select
+  ls.org_id,
+  ls.logbook_id,
+  user_role,
+  position_id::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  ls.id as entity_id,
+  'logbook_schedule' as entity_type,
+  jsonb_build_object('title', ls.title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_schedules as ls,
+  unnest(ls.overdue_employee_positions) as position_id,
+  (values ('admin'), ('user')) as roles(user_role)
+where
+  ls.deleted_at is null
+on conflict (org_id, logbook_id, user_role, employee_position_id, permission_type, entity_id)
+do nothing;
+
+COMMIT;
+

# 2024-08-06 13:51:50.580660
+BEGIN;
+
+with flattened_employee_position_ids as (
+  select
+    jsonb_array_elements(stages.employee_position_ids) as position_id
+  from
+    (
+      select
+        value -> 'employee_position_ids' as employee_position_ids
+      from
+        logbooks as l,
+        jsonb_each(l.stages)
+    ) as stages
+  where
+    employee_position_ids is not null
+) insert into logbook_rights (
+  org_id, logbook_id, user_role, employee_position_id,
+  permission_type, value
+)
+select
+  l.org_id::uuid,
+  l.id,
+  user_role,
+  (fp.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  true as value
+from
+  logbooks as l,
+  flattened_employee_position_ids as fp,
+  (
+    values
+      ('admin'),
+      ('user')
+  ) as roles(user_role) on conflict (
+    org_id, logbook_id, user_role, employee_position_id,
+    permission_type
+  ) do nothing;
+
+
+with logbook_stage_info as (
+  select
+    org_id,
+    logbook_id,
+    key as stage_id,
+    jsonb_array_elements(stages.employee_position_ids) as position_id,
+    stage_title
+  from
+    (
+      select
+        l.org_id as org_id,
+        l.id as logbook_id,
+        key,
+        value -> 'employee_position_ids' as employee_position_ids,
+        value -> 'title' as stage_title
+      from
+        logbooks as l,
+        jsonb_each(l.stages)
+      where
+        l.deleted_at is null
+    ) as stages
+  where
+    employee_position_ids is not null
+) insert into right_linked_entities (
+  org_id, logbook_id, user_role, employee_position_id,
+  permission_type, entity_id, entity_type,
+  entity_info, created_at, updated_at
+)
+select
+  lsi.org_id::uuid,
+  lsi.logbook_id,
+  user_role,
+  (lsi.position_id ->> 0)::uuid as employee_position_id,
+  'write_qr' as permission_type,
+  lsi.stage_id as entity_id,
+  'stage' as entity_type,
+  jsonb_build_object('title', lsi.stage_title) as entity_info,
+  now() as created_at,
+  now() as updated_at
+from
+  logbook_stage_info as lsi,
+  (
+    values
+      ('admin'),
+      ('user')
+  ) as roles(user_role) on conflict (
+    org_id, logbook_id, user_role, employee_position_id,
+    permission_type, entity_id
+  ) do nothing;
+
+COMMIT;
+

# 2024-08-19 12:31:44.979414
+\dt+ schema_migrations

# 2024-08-19 12:31:52.886516
+\d+ schema_migrations

# 2024-08-19 12:31:59.432612
+select * from schema_migrations

# 2024-08-19 12:32:03.068397
+select * from orders

# 2024-08-19 12:32:05.937889
+exit

# 2024-08-19 12:32:48.092536
+delete from schema_migrations;

# 2024-08-19 12:32:49.790395
+exit

# 2024-08-19 12:33:04.310091
+select * from orders

# 2024-08-19 12:33:06.452799
+exit

# 2024-08-21 09:53:44.371987
+select * from useres;

# 2024-08-21 09:53:46.285041
+select * from users

# 2024-08-21 09:54:04.197385
+select * from users where email = 'testovich@testovich.ru'

# 2024-08-21 09:54:32.023799
+select * from notification_messages where user_id = '19c6ae7e-7f1d-4c03-9c2e-321cb2c15276'

# 2024-08-21 09:54:43.914353
+select count(*) from notification_messages where user_id = '19c6ae7e-7f1d-4c03-9c2e-321cb2c15276'

# 2024-08-21 09:57:07.049453
+select count(*) from notification_messages where user_id = '19c6ae7e-7f1d-4c03-9c2e-321cb2c15276' and type = 'task_overdue_event '

# 2024-08-21 09:57:10.705900
+select count(*) from notification_messages where user_id = '19c6ae7e-7f1d-4c03-9c2e-321cb2c15276' and type = 'task_overdue_event'

# 2024-08-21 09:57:33.861723
+clear

# 2024-08-21 11:23:21.455479
+select * from users where email = 'lalala123@werty.com'

# 2024-08-21 11:37:45.586510
+select * from users where email = 'testovich@testovich.ru'

# 2024-08-21 11:38:01.487447
+select id from users where email = 'testovich@testovich.ru'

# 2024-08-21 11:38:15.062601
+select * from employee_position_users where user_id = '19c6ae7e-7f1d-4c03-9c2e-321cb2c15276'

# 2024-08-21 12:04:15.634895
+select * from users where email = 'pavel.dorozhkin@rentateam.ru'

# 2024-08-21 12:04:27.848806
+select * from users where role = 'owner'

# 2024-08-21 12:04:51.768446
+select * from users where role = 'user'

# 2024-08-21 12:07:21.287888
+select * from users where role = 'owner'

# 2024-08-26 10:16:25.892980
+select * from files limit 1

# 2024-08-27 12:35:22.183116
+select role from users where email = 'pavel.dorozhkin@rentateam.ru'

# 2024-08-27 12:35:36.860478
+select * from users where role = 'owner'

# 2024-08-29 10:26:28.345784
+exit

# 2024-09-05 11:26:04.879209
+select * from logbook_rights where logbook_id = 'b7b2b06f-c63b-45c7-9483-5b8400f8e72c'

# 2024-09-05 11:26:32.420955
+select * from users where phone = '+70000000009'

# 2024-09-05 11:28:22.571417
+select * from employee_position_users where user_id = '9b38a63f-2a2c-4649-833d-57f14d4953e1'

# 2024-09-05 11:29:32.405955
+select * from logbook_rights where employee_position_id in ('08dc6ac2-23f9-4c89-a9ce-dc9d14383d31', '046e8c9f-c9ed-4196-b468-9b3a3d71936f', '1024a77a-32fa-44ed-ad07-21f5e6eeec37')

# 2024-09-05 11:29:51.128066
+select * from logbook_rights where employee_position_id in ('08dc6ac2-23f9-4c89-a9ce-dc9d14383d31', '046e8c9f-c9ed-4196-b468-9b3a3d71936f', '1024a77a-32fa-44ed-ad07-21f5e6eeec37') and logbook_id = 'b7b2b06f-c63b-45c7-9483-5b8400f8e72c'

# 2024-09-05 11:30:03.604014
+select * from logbook_rights where employee_position_id in ('08dc6ac2-23f9-4c89-a9ce-dc9d14383d31', '046e8c9f-c9ed-4196-b468-9b3a3d71936f', '1024a77a-32fa-44ed-ad07-21f5e6eeec37') and logbook_id = 'b7b2b06f-c63b-45c7-9483-5b8400f8e72c' and user_role = 'user'

# 2024-09-05 11:36:50.902708
+select title from employee_positions where id in ('08dc6ac2-23f9-4c89-a9ce-dc9d14383d31', '1024a77a-32fa-44ed-ad07-21f5e6eeec37')

# 2024-09-06 15:51:25.100480
+select * from tag_relations

# 2024-09-06 15:52:13.947675
+select * from tags

# 2024-09-06 16:25:43.660123
+select * from tag_relations

# 2024-09-06 16:26:00.803918
+select * from tag_relations where module_value = '004929b6-b0ad-4426-90d0-45afb828f71b'

# 2024-09-09 16:48:58.179190
+select * from quotes

# 2024-09-09 16:49:08.503663
+\d+ information_schema

# 2024-09-09 16:49:11.182758
+\d information_schema

# 2024-09-09 16:49:13.058618
+\dt information_schema

# 2024-09-09 16:49:17.460816
+\dt+

# 2024-09-09 16:49:25.132603
+\d schema_migrations

# 2024-09-09 16:49:33.548232
+select * from schema_migrations

# 2024-09-10 12:37:18.124697
+exit

# 2024-09-13 14:13:27.984065
+\d

# 2024-09-13 14:13:29.997218
+\dt+

# 2024-09-13 14:13:34.217905
+select * from schema_migrations

# 2024-09-13 14:13:44.231178
+delete table schema_migrations

# 2024-09-13 14:13:52.555326
+delete table if exists schema_migrations

# 2024-09-13 14:14:03.477916
+delete schema_migrations

# 2024-09-13 14:14:16.201686
+drop table if exists information_schema

# 2024-09-13 14:14:21.018606
+\dt+

# 2024-09-13 14:14:28.779904
+drop table schema_migrations

# 2024-09-13 14:14:30.872991
+\dt+

# 2024-09-13 14:15:05.208135
+select * from information_schema.schemata

# 2024-09-13 14:15:14.632965
+select * from schema_migrations

# 2024-09-13 14:21:43.082007
+\dt_

# 2024-09-13 14:21:44.336778
+\dt+

# 2024-09-13 14:21:48.734417
+\t items

# 2024-09-13 14:21:51.600906
+\d items

# 2024-09-13 14:35:09.819893
+\dt+

# 2024-09-13 14:35:12.463693
+select * from items

# 2024-09-13 14:36:22.580443
+update items set person_id = 0

# 2024-09-13 14:36:25.122172
+select * from items

# 2024-09-13 18:13:40.276325
+exit

# 2024-09-24 10:29:40.962454
+\dt+

# 2024-09-24 10:29:44.700867
+select * from users

# 2024-10-09 18:24:07.438270
+\dt+

# 2024-10-09 18:24:47.808029
+create table if not exists snapshots (id uuid primary key, number integer, created_at timestamp default now())

# 2024-10-09 18:25:05.182435
+drop table snapshots

# 2024-10-09 18:25:11.429514
+create table if not exists snapshots (id text primary key, number integer, created_at timestamp default now())

# 2024-10-09 18:25:23.919172
+select * from snapshots

# 2024-10-25 18:10:40.938338
+\dt+

# 2024-10-25 18:11:34.352952
+\h CREATE LANGUAGE

# 2024-10-25 18:15:02.954722
+create or replace function mysum(int, int)

# 2024-10-25 18:16:04.706707
+create or replace function mysum(int, int) returns int as 'select $1 + $2;' language 'sql'

# 2024-10-25 18:16:12.192066
+select mysum(1, 2)

# 2024-10-25 18:18:45.116992
+delete function mysum

# 2024-10-25 18:19:09.496476
+drop function mysum

# 2024-10-25 18:19:44.499888
+create or replace function mysum(int, int) returns int as $$ select $1 + $2; $$ language 'sql'

# 2024-10-25 18:19:49.910036
+select mysum(1, 2)

# 2024-10-25 18:20:23.692823
+drop function if exists mysum

# 2024-10-25 18:21:25.732597
+do

# 2024-10-25 18:21:27.631483
+do \

# 2024-10-25 18:22:02.723024
+do $$ begin raise notice 'current time: %', now(); end; $$ language 'plpgsql'

# 2024-10-25 18:22:21.095494
+do $$ begin raise notice 'current time: %', now() end $$ language 'plpgsql'

# 2024-10-25 18:22:31.864533
+do $$ begin raise notice 'current time: %', now(); end $$ language 'plpgsql'

# 2024-10-25 18:23:57.036936
+create or replace function mysum(int, int) returns int as $$ select $1 + $2; $$ language 'sql';

# 2024-10-25 18:24:25.417981
+create function mysum(int, int) returns int as $$ select $1 + $2; $$ language 'sql';

# 2024-10-25 18:24:42.096613
+create if not exists function mysum(int, int) returns int as $$ select $1 + $2; $$ language 'sql';

# 2024-10-25 18:24:56.605218
+create  function mysum(int, int) returns int as $$ select $1 + $2; $$ language 'sql';

# 2024-10-25 18:25:03.949591
+create or replace function mysum(int, int) returns int as $$ select $1 + $2; $$ language 'sql';

# 2024-10-25 18:25:26.915841
+select mysum(1, 2)

# 2024-10-25 18:25:56.786155
+select now(), mysum(id, id) from generate_series(1, 3) as id

# 2024-10-25 18:40:42.118923
+create of replace function investment_calculator(
+in v_amount numeric, in v_interest numeric, in v_years int)
+returns numeric as
+$$
+    declare
+        v_sum alias for $1;
+        v_result numeric := 0;
+    begin
+        v_result := v_amount
+        * pow(1 + v_interest, v_years);
+        return v_result;
+    end;
+$$ language 'plpgsql';

# 2024-10-25 18:40:49.971329
+create or replace function investment_calculator(
+in v_amount numeric, in v_interest numeric, in v_years int)
+returns numeric as
+$$
+    declare
+        v_sum alias for $1;
+        v_result numeric := 0;
+    begin
+        v_result := v_amount
+        * pow(1 + v_interest, v_years);
+        return v_result;
+    end;
+$$ language 'plpgsql';

# 2024-10-25 18:41:15.074498
+select investment_calculator(
+    v_amount   := 1000,
+    v_interest := 0.1,
+    v_years    := 2
+);

# 2024-10-25 18:48:30.467983
+create or replace function simple_invest(numeric, numeric, numeric)
+returns numeric as
+$$
+    select $1 * pow(1 + $2, $3);
+$$ language 'sql';

# 2024-10-25 18:49:01.468312
+select investment_calculator(x, 0.1, 2) from generate_series(1, 1000000) as x;

# 2024-10-25 18:49:41.111826
+select simple_invest(x, 0.1, 2) from generate_series(1, 1000000) as x;

# 2024-10-25 18:55:55.006263
+create or replace function investment_calculator(in v_amount numeric, in v_interest numeric, in v_years integer) returns numeric as
+$$
+    begin
+        if v_years < 1
+            then
+                raise exception 'use values > 1 year instead of %s', v_years;
+        elseif v_years > 100
+            then
+                raise warning 'predicting more than 100 years is not recommended';
+        else
+            return v_amount * pow(1 + v_interest, v_years);
+        end if;
+        
+        return null;
+    end;
+$$ language 'plpgsql';
+        

# 2024-10-25 18:57:07.940503
+select investment_calculator(x, 0.1, 2) from generate_series(1, 1000000) as x;

# 2024-10-25 18:57:14.608343
+select investment_calculator(x, 0.1, 2) from generate_series(1, 5) as x;

# 2024-10-25 18:57:31.182815
+select investment_calculator(x, 0.1, -2) from generate_series(1, 5) as x;

# 2024-10-25 18:57:42.042012
+select investment_calculator(x, 0.1, 2344523) from generate_series(1, 5) as x;

# 2024-10-25 18:58:03.722591
+select investment_calculator(1000, 0.1, 2344523);

# 2024-10-25 18:58:24.966322
+create or replace function investment_calculator(in v_amount numeric, in v_interest numeric, in v_years integer) returns numeric as
+$$
+    begin
+        if v_years < 1
+            then
+                raise exception 'use values > 1 year instead of %s', v_years;
+        else v_years > 100
+            then
+                raise warning 'predicting more than 100 years is not recommended';
+        else
+            return v_amount * pow(1 + v_interest, v_years);
+        end if;
+        
+        return null;
+    end;
+$$ language 'plpgsql';
+        

# 2024-10-25 18:58:36.442095
+create or replace function investment_calculator(in v_amount numeric, in v_interest numeric, in v_years integer) returns numeric as
+$$
+    begin
+        if v_years < 1
+            then
+                raise exception 'use values > 1 year instead of %s', v_years;
+        else 234v_years > 100
+            then
+                raise warning 'predicting more than 100 years is not recommended';
+        else
+            return v_amount * pow(1 + v_interest, v_years);
+        end if;
+        
+        return null;
+    end;
+$$ language 'plpgsql';
+        

# 2024-10-25 18:58:44.747314
+select investment_calculator(x, 0.1, 2344523) from generate_series(1, 5) as x;

# 2024-10-25 18:59:00.455366
+create or replace function investment_calculator(in v_amount numeric, in v_interest numeric, in v_years integer) returns numeric as
+$$
+    begin
+        if v_years < 1
+            then
+                raise exception 'use values > 1 year instead of %s', v_years;
+        elseif v_years > 100
+            then
+                raise warning 'predicting more than 100 years is not recommended';
+        else
+            return v_amount * pow(1 + v_interest, v_years);
+        end if;
+        
+        return null;
+    end;
+$$ language 'plpgsql';
+        

# 2024-10-25 19:15:17.418360
+create function broken(text) returns void as
+$$
+declare
+    v_sql text;
+begin
+    v_sql := 'select schemaname
+        from pg_tables
+        where tablename = ''' || $1 || '''';
+    raise notice 'v_sql: %', v_sql;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:15:26.808183
+select broken("hello");

# 2024-10-25 19:15:33.469208
+select broken("t_test");

# 2024-10-25 19:15:38.217514
+select broken('t_test');

# 2024-10-25 19:15:47.002816
+select * from pg_tables;

# 2024-10-25 19:15:53.717943
+select broken('t_test');

# 2024-10-25 19:16:12.293778
+create table if not exists t_test;

# 2024-10-25 19:16:14.892320
+create table if not exists t_test ();

# 2024-10-25 19:16:18.233347
+select broken('t_test');

# 2024-10-25 19:16:50.037056
+select broken('''; drop table t_test; ');

# 2024-10-25 19:16:52.956353
+\dt+

# 2024-10-25 19:17:18.944298
+drop table t_test;

# 2024-10-25 19:18:45.076376
+select quote_literal(E'o''reilly'), quote_ident(E'o''reilly');

# 2024-10-25 19:21:40.789353
+create table "Some stupid name" ("ID" int);

# 2024-10-25 19:21:42.799155
+\dt+

# 2024-10-25 19:21:48.970151
+\dt+ "Some stupid name""

# 2024-10-25 19:21:57.955823
+drop table "Some stupid name";

# 2024-10-25 19:24:45.712532
+select format('Hello, %s %s', 'PostgreSQL', 15);

# 2024-10-25 19:25:25.937606
+select format('%1$s, %1$s, %2$s');

# 2024-10-25 19:25:38.319338
+select format('%1$s, %1$s, %2$s', 'one', 'two');

# 2024-10-25 19:29:34.823909
+CREATE FUNCTION get_diag() RETURNS int AS
+$$
+DECLARE
+rc int;
+_sqlstate text;
+_message text;
+_context text;
+BEGIN
+EXECUTE 'SELECT * FROM generate_series(1, 10)';
+GET DIAGNOSTICS rc = ROW_COUNT;
+RAISE NOTICE 'row count: %', rc;
+SELECT rc / 0;
+EXCEPTION
+WHEN OTHERS THEN
+GET STACKED DIAGNOSTICS
+_sqlstate = returned_sqlstate,
+_message = message_text,
+_context = pg_exception_context;
+RAISE NOTICE 'sqlstate: %, message: %, context: [%]',
+_sqlstate,
+_message,
+replace( _context, E'n', ' <- ' );
+RETURN rc;
+END;
+$$ LANGUAGE 'plpgsql';

# 2024-10-25 19:29:46.164052
+select get_diag();

# 2024-10-25 19:37:41.414436
+create of replace function c(int) returns setof text as
+$$
+declare
+    v_rec record;
+begin
+    for v_rec in select tablename
+        from pg_tables
+        limit $1
+    loop
+        return next v_rec.tablename
+    end loop;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:37:46.837377
+create or replace function c(int) returns setof text as
+$$
+declare
+    v_rec record;
+begin
+    for v_rec in select tablename
+        from pg_tables
+        limit $1
+    loop
+        return next v_rec.tablename
+    end loop;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:38:44.874657
+select * from c(3);

# 2024-10-25 19:39:01.011663
+create or replace function c(int) returns setof text as
+$$
+declare
+    v_rec record;
+begin
+    for v_rec in select tablename
+        from pg_tables
+        limit $1
+    loop
+        return next v_rec.tablename
+    end loop;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:39:10.641132
+create or replace function cursor(int) returns setof text as
+$$
+declare
+    v_rec record;
+begin
+    for v_rec in select tablename
+        from pg_tables
+        limit $1
+    loop
+        return next v_rec.tablename
+    end loop;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:39:19.688328
+create or replace function cur(int) returns setof text as
+$$
+declare
+    v_rec record;
+begin
+    for v_rec in select tablename
+        from pg_tables
+        limit $1
+    loop
+        return next v_rec.tablename
+    end loop;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:39:35.898674
+create or replace function cur(int) returns setof text as
+$$
+declare
+    v_rec record;
+begin
+    for v_rec in select tablename
+        from pg_tables
+        limit $1
+    loop
+        return next v_rec.tablename;
+    end loop;
+    
+    return;
+end;
+$$ language 'plpgsql';

# 2024-10-25 19:39:40.969750
+select * from cur(3);

# 2024-11-13 18:01:04.809673
+create table "Some stupid name" ("ID" int);

# 2024-11-13 18:17:32.207911
+drop table if exists "Some stupid name"

# 2024-11-13 18:20:01.594218
+set database new_db

# 2024-11-13 18:20:05.489166
+use new_db

# 2024-11-13 18:20:13.110772
+\dt+

# 2024-12-12 12:25:42.354482
+select count(*) from tasks

# 2024-12-12 12:25:55.129323
+select * from tasks limit 1

# 2024-12-12 12:26:26.415960
+select count(*) from tasks

# 2024-12-12 12:26:59.132012
+select * from tasks where deleted_at is null limit 1

# 2024-12-12 12:27:08.822704
+delete * from tasks where deleted_at no null

# 2024-12-12 12:27:12.645484
+delete from tasks where deleted_at no null

# 2024-12-12 12:27:16.249505
+delete from tasks where deleted_at not null

# 2024-12-12 12:27:24.002236
+delete from tasks where deleted_at is not null

# 2024-12-12 12:31:20.189336
+exit

# 2024-12-24 00:31:11.025044
+select * from logbooks where fields is not null

# 2024-12-24 00:31:21.128631
+clear

# 2024-12-24 00:32:14.412440
+SELECT *
+FROM logbooks
+WHERE fields ->> 'created_at' IS NOT NULL
+AND fields ->> 'created_at' ~ '^[0-9]{4}-[0-9]{2}-[0-9]{2}.*$';

# 2024-12-24 00:32:31.583126
+select fields ->> 'created_at' from logbooks

# 2024-12-24 00:32:42.338981
+select fields -> 'created_at' from logbooks

# 2024-12-24 00:33:11.245334
+select * from logbook_entries where created_at is not null;

# 2024-12-24 00:33:19.643204
+select * from logbook_entries where created_at is not null limit 10;

# 2024-12-24 00:33:33.659078
+select created_at, values -> 'created_at' from logbook_entries where created_at is not null limit 10;

# 2024-12-24 00:35:00.831877
+select * from logbook_entries group by logbook_id having count(distinct created_at) = 1

# 2024-12-24 00:35:07.172018
+select count(*) from logbook_entries group by logbook_id having count(distinct created_at) = 1

# 2024-12-24 00:35:32.152009
+select count(*) as result from logbook_entries group by logbook_id having count(distinct created_at) = 1 where result != 1

# 2024-12-24 00:35:44.671831
+select count(*) as result from logbook_entries where result != 1 group by logbook_id having count(distinct created_at) = 1

# 2024-12-24 00:35:52.578664
+select count(*) as result from logbook_entries where result = 1 group by logbook_id having count(distinct created_at) = 1

# 2024-12-24 00:36:02.719017
+select count(*) as result from logbook_entries group by logbook_id having count(distinct created_at) = 1 where result != 1

# 2024-12-24 00:36:24.042577
+SELECT COUNT(*) AS result
+FROM (
+    SELECT logbook_id
+    FROM logbook_entries
+    GROUP BY logbook_id
+    HAVING COUNT(DISTINCT created_at) = 1
+) AS grouped_entries
+WHERE result != 1;
+

# 2024-12-24 00:36:55.919913
+SELECT logbook_id, created_at
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1;
+

# 2024-12-24 00:37:24.378275
+SELECT count(*)
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1;
+

# 2024-12-24 00:38:04.920371
+with subquery as (SELECT count(*) as result
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1) select * from subquery where result != 1
+

# 2024-12-24 00:40:19.700642
+with subquery as (SELECT created_at, count(*) as result
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1) select * from subquery where result != 1
+

# 2024-12-24 00:40:42.911386
+with subquery as (SELECT logbook_id, created_at, count(*) as result
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1) select * from subquery where result != 1
+

# 2024-12-24 00:40:55.748270
+select * from logbooks where id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9'

# 2024-12-24 00:41:12.101949
+select * from logbooks where id = '2e513f5f-2458-4011-a0af-a3aef66c6570'

# 2024-12-24 00:41:42.207287
+with subquery as (SELECT logbook_id, created_at, count(*) as result
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1) select * from subquery where result != 1
+

# 2024-12-24 00:41:52.329249
+select * from logbooks where id = '811550ae-b597-4869-870a-759db185b428 '

# 2024-12-24 00:41:54.224063
+select * from logbooks where id = '811550ae-b597-4869-870a-759db185b428'

# 2024-12-24 00:42:19.150182
+select created_at from logbook_entries where logbook_id = '811550ae-b597-4869-870a-759db185b428'

# 2024-12-24 00:44:56.906630
+with subquery as (SELECT logbook_id, created_at, count(*) as result
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1) select * from subquery where result != 1
+

# 2024-12-24 00:46:08.230862
+select values -> 'created_at' from logbook_entries where logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9'

# 2024-12-24 00:46:15.779782
+select values from logbook_entries where logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9'

# 2024-12-24 00:46:59.530190
+select created_at from logbook_entries where logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9'

# 2024-12-24 00:47:36.743674
+select count(*) from logbook_entries where values -> 'created_at' -> 'type' = 'text';

# 2024-12-24 00:48:02.708262
+select count(*) from logbook_entries where values -> 'created_at' ->> 'type' = 'text';

# 2024-12-24 00:48:11.950799
+with subquery as (SELECT logbook_id, created_at, count(*) as result
+FROM logbook_entries
+GROUP BY logbook_id, created_at
+HAVING COUNT(DISTINCT created_at) = 1) select * from subquery where result != 1
+

# 2024-12-24 00:48:29.573480
+select values from logbook_entries limit 10

# 2024-12-24 00:49:06.530036
+select values ->> 'created_at' from logbook_entries limit 10

# 2024-12-24 00:53:10.540122
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select * from numbered_entries

# 2024-12-24 00:53:36.912415
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select rn from numbered_entries

# 2024-12-24 00:53:44.955395
+exit

# 2024-12-24 00:55:03.025461
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select rn from numbered_entries

# 2024-12-24 00:55:29.726592
+WITH subquery AS (
+    SELECT logbook_id, created_at, COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+)
+select * from subquery

# 2024-12-24 00:55:42.835196
+WITH subquery AS (
+    SELECT logbook_id, created_at, COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+)
+select * from subquery where result != 1

# 2024-12-24 00:55:49.739507
+WITH subquery AS (
+    SELECT logbook_id, created_at, COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+)
+select * from subquery where entries != 1

# 2024-12-24 00:57:19.448647
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select * from subquery where entries != 1

# 2024-12-24 00:57:31.917219
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select * from numbered_entries

# 2024-12-24 00:58:01.900276
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select distinct(logbook_id), distinct(created_at) from numbered_entries

# 2024-12-24 00:58:11.191090
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select distinct logbook_id, distinct created_at from numbered_entries

# 2024-12-24 00:58:15.818965
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select distinct logbook_id from numbered_entries

# 2024-12-24 00:58:42.719049
+WITH subquery AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN subquery s ON le.logbook_id = s.logbook_id
+    WHERE s.entries > 1
+)
+select logbook_id from subquery where entries > 1

# 2024-12-24 00:59:59.365328
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1
+)
+select * from numbered_entries

# 2024-12-24 01:01:51.841186
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+select * from numbered_entries

# 2024-12-24 01:02:19.048637
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+select * from imported_logbooks

# 2024-12-24 01:02:32.840701
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+select * from imported_logbooks where entries > 1

# 2024-12-24 01:05:16.591009
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+
+UPDATE logbook_entries
+SET created_at = created_at + INTERVAL '1 second' * rn
+FROM numbered_entries ne
+WHERE logbook_entries.id = ne.id AND logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9';

# 2024-12-24 01:05:24.503097
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+
+UPDATE logbook_entries
+SET created_at = created_at + INTERVAL '1 second' * rn
+FROM numbered_entries ne
+WHERE logbook_entries.id = ne.id AND logbook_id = ne.'22a6fc90-c983-49d5-ba3d-1413b43bb0b9';

# 2024-12-24 01:05:38.731827
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+
+UPDATE logbook_entries
+SET created_at = created_at + INTERVAL '1 second' * rn
+FROM numbered_entries ne
+WHERE logbook_entries.id = ne.id AND logbook_entries.logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9';

# 2024-12-24 01:05:54.096752
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+
+UPDATE logbook_entries
+SET created_at = logbook_entries.created_at + INTERVAL '1 second' * rn
+FROM numbered_entries ne
+WHERE logbook_entries.id = ne.id AND logbook_entries.logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9';

# 2024-12-24 01:06:14.129674
+select created_at from logbook_entries where logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b'

# 2024-12-24 01:06:37.729952
+select created_at from logbook_entries where logbook_id = '22a6fc90-c983-49d5-ba3d-1413b43bb0b9'

# 2024-12-24 01:07:45.494095
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+
+select logbook_id from imported_logbooks where entries > 1

# 2024-12-24 01:08:08.134849
+WITH imported_logbooks AS (
+    SELECT logbook_id, 
+           created_at, 
+           COUNT(*) AS entries
+    FROM logbook_entries
+    GROUP BY logbook_id, created_at
+    HAVING COUNT(DISTINCT created_at) = 1
+), 
+numbered_entries AS (
+    SELECT le.id, 
+           le.logbook_id, 
+           le.created_at,
+           ROW_NUMBER() OVER (PARTITION BY le.logbook_id ORDER BY le.id) AS rn
+    FROM logbook_entries le
+    JOIN imported_logbooks il ON le.logbook_id = il.logbook_id
+    WHERE il.entries > 1 AND le.created_at = il.created_at
+)
+
+UPDATE logbook_entries
+SET created_at = logbook_entries.created_at + INTERVAL '1 second' * rn
+FROM numbered_entries ne
+WHERE logbook_entries.id = ne.id;
+

# 2025-01-06 13:52:38.787317
+select extension from files;

# 2025-01-06 14:10:03.405238
+select name, extension from files;

# 2025-01-06 15:21:16.253308
+exit

# 2025-01-14 02:01:31.754814
+select * from files limit 1

# 2025-01-14 02:19:41.977163
+select * from files limit 1 where id = '469339bb-509d-4451-8910-f3cf51ea1a86'

# 2025-01-14 02:19:46.233880
+exit

# 2025-01-14 02:23:29.143467
+select * from files limit 1 where id = '469339bb-509d-4451-8910-f3cf51ea1a86'

# 2025-01-14 02:23:34.211450
+select * from files where id = '469339bb-509d-4451-8910-f3cf51ea1a86'

# 2025-01-14 02:23:49.782657
+select * from files where name ilike '469339bb-509d-4451-8910-f3cf51ea1a86'

# 2025-01-14 02:23:51.670418
+select * from files where name ilike '469339bb-509d-4451-8910-f3cf51ea1a86%'

# 2025-01-14 02:24:08.800784
+select * from files where name ilike '469339bb-509d-4451-8910-f3cf51ea1a86_s.png'

# 2025-01-14 02:24:13.206991
+select * from files where name = '469339bb-509d-4451-8910-f3cf51ea1a86_s.png'

# 2025-01-14 02:24:44.953457
+select * from files order by create_at desc

# 2025-01-14 02:24:49.213082
+select * from files order by created_at desc

# 2025-01-14 02:39:27.331424
+select * from files order by created_at desc where extension = 'jpeg'

# 2025-01-14 02:42:43.114235
+select * from files where extension = 'jpeg'

# 2025-01-14 03:14:10.931625
+select * from files where name = '4955dae7-0490-44b9-b90c-072e0bf46fa8_s.jpeg'

# 2025-01-14 03:25:32.696025
+select * from files where extension = 'jpeg'

# 2025-01-16 15:24:44.599148
+select * from files where id = 'e61a0dc7-6b4e-47c5-9fdf-67e20d5e6aee'

# 2025-01-19 16:21:40.245169
+select * from logbook_autofill_groups

# 2025-01-19 16:22:30.095624
+select values from logbook_autofill_groups

# 2025-01-19 16:23:18.553597
+BEGIN;
+
+UPDATE logbook_autofill_groups
+SET values = (SELECT jsonb_object_agg(key,
+                                      CASE
+                                          WHEN value ->> 'type' = 'photo' THEN
+                                              jsonb_set(
+                                                      value,
+                                                      '{value}',
+                                                      jsonb_build_object(
+                                                              'value',
+                                                              jsonb_build_array(jsonb_build_object('id', value -> 'value' ->> 'value'))
+                                                      )
+                                              )
+                                          ELSE value
+                                          END
+                     )
+              FROM jsonb_each(values))
+WHERE EXISTS (SELECT 1
+              FROM jsonb_each(values) AS kv(key, value)
+              WHERE value ->> 'type' = 'photo');
+
+COMMIT;

# 2025-01-19 16:23:26.709934
+select values from logbook_autofill_groups

# 2025-01-19 16:23:47.429923
+clear

# 2025-01-19 18:40:52.153034
+exit
